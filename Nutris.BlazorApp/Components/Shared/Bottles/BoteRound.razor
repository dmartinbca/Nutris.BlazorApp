@namespace NutrisBlazor.Components.Shared.Bottles

<svg width="200" height="250" viewBox="0 0 200 250" xmlns="http://www.w3.org/2000/svg">
    <defs>
        <filter id="bottleShadowRound">
            <feDropShadow dx="2" dy="4" stdDeviation="3" flood-opacity="0.2"/>
        </filter>
        <radialGradient id="bottleGradientRound" cx="50%" cy="50%">
            <stop offset="0%" style="stop-color:@LightenColor(ColorBote);stop-opacity:1" />
            <stop offset="70%" style="stop-color:@ColorBote;stop-opacity:1" />
            <stop offset="100%" style="stop-color:@DarkenColor(ColorBote);stop-opacity:1" />
        </radialGradient>
    </defs>
    
    <!-- Tapa -->
    <ellipse cx="100" cy="30" rx="25" ry="8" fill="#333" />
    <rect x="85" y="30" width="30" height="10" fill="#555" />
    
    <!-- Cuello -->
    <path d="M 85 40 L 85 60 L 115 60 L 115 40 Z" fill="url(#bottleGradientRound)" />
    
    <!-- Cuerpo (cilíndrico) -->
    <ellipse cx="100" cy="60" rx="50" ry="15" fill="url(#bottleGradientRound)" />
    <rect x="50" y="60" width="100" height="160" fill="url(#bottleGradientRound)" />
    <ellipse cx="100" cy="220" rx="50" ry="15" fill="url(#bottleGradientRound)" 
             filter="url(#bottleShadowRound)" />
    
    <!-- Reflejos -->
    <ellipse cx="75" cy="100" rx="15" ry="40" fill="white" opacity="0.3" />
    <ellipse cx="70" cy="95" rx="8" ry="25" fill="white" opacity="0.5" />
    
    @if (ShowLabel)
    {
        <rect x="55" y="120" width="90" height="80" rx="15" 
              fill="white" opacity="0.9" />
        <svg x="55" y="120" width="90" height="80">
            <text x="45" y="45"
                  text-anchor="middle"
                  font-family="Arial, sans-serif"
                  font-size="12"
                  fill="#333">
                @LabelText
            </text>
        </svg>
    }
</svg>

@code {
    [Parameter] public string ColorBote { get; set; } = "#4B7BCD";
    [Parameter] public bool ShowLabel { get; set; } = false;
    [Parameter] public string LabelText { get; set; } = "";
    
    private string LightenColor(string hex)
    {
        // Mismo código que BoteSquare
        if (string.IsNullOrEmpty(hex)) return "#ffffff";
        try
        {
            hex = hex.TrimStart('#');
            if (hex.Length != 6) return "#ffffff";
            
            int r = Convert.ToInt32(hex.Substring(0, 2), 16);
            int g = Convert.ToInt32(hex.Substring(2, 2), 16);
            int b = Convert.ToInt32(hex.Substring(4, 2), 16);
            
            r = Math.Min(255, (int)(r + (255 - r) * 0.3));
            g = Math.Min(255, (int)(g + (255 - g) * 0.3));
            b = Math.Min(255, (int)(b + (255 - b) * 0.3));
            
            return $"#{r:X2}{g:X2}{b:X2}";
        }
        catch { return "#ffffff"; }
    }
    
    private string DarkenColor(string hex)
    {
        // Mismo código que BoteSquare
        if (string.IsNullOrEmpty(hex)) return "#000000";
        try
        {
            hex = hex.TrimStart('#');
            if (hex.Length != 6) return "#000000";
            
            int r = Convert.ToInt32(hex.Substring(0, 2), 16);
            int g = Convert.ToInt32(hex.Substring(2, 2), 16);
            int b = Convert.ToInt32(hex.Substring(4, 2), 16);
            
            r = (int)(r * 0.7);
            g = (int)(g * 0.7);
            b = (int)(b * 0.7);
            
            return $"#{r:X2}{g:X2}{b:X2}";
        }
        catch { return "#000000"; }
    }
}