@* NavSidebar.razor - Ubicación: /Components/Shared/NavSidebar.razor *@
@namespace NutrisBlazor.Components.Shared
@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject ILocalizationService Localization
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@implements IDisposable
<link href="/css/NavSideBar.css" rel="stylesheet" />
<link href="/css/fonts.css" rel="stylesheet" />
<div class="sidebar">
    <div class="content-sidebar">
        <div>
            <a href="/home">
                <div class="logo">
                    <img alt="nutris logo" class="w-75" src="/logonutris.svg" />
                </div>
            </a>

            <div class="nav-container">
                <nav class="font-20">
                    <NavLink href="/home" Match="NavLinkMatch.All">
                        <div class="navgrid">
                            <img src="/menu/feamehome.svg" alt="home">
                            <span>@Localization["NavBar.Home"]</span>
                        </div>
                    </NavLink>
                    <NavLink href="/yourproducts">
                        <div class="navgrid">
                            <img src="/menu/yourproducts.svg" alt="yourproducts">
                            <span>@Localization["NavBar.YourProducts"]</span>
                        </div>
                    </NavLink>
                    <NavLink href="/customize">
                        <div class="navgrid">
                            <img src="/menu/customize.svg" alt="customize">
                            <span>@Localization["NavBar.Customize"]</span>
                        </div>
                    </NavLink>
                </nav>
            </div>
            <hr class="lineb">
        </div>

        <div class="perfil-container">
            <div class="avatar-container">
                @if (!string.IsNullOrEmpty(customerLogo))
                {
                    <img src="@($"data:image/png;base64,{customerLogo}")" alt="" class="avatar">
                }
                <div class="text-titles">
                    <h2>@userName</h2>
                </div>
            </div>

            <div class="icons-acount">
                <img @onclick="ShowLogoutModal" src="/menu/exit.svg" alt="exit">
                <img src="/menu/interrogacion.png" alt="help" style="width: 25px;"
                     @onmouseover="() => isTooltipVisible = true"
                     @onmouseleave="() => isTooltipVisible = false">
                <img src="/menu/perfil.svg" alt="perfil">

                @if (isTooltipVisible)
                {
                    <div class="tooltip-custom">
                        <p>@Localization["NavBar.Needhelp"]</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Logout Modal con estética de ConfirmModal -->
@if (showLogoutModal)
{
    <!-- Backdrop -->
    <div class="logout-modal-backdrop" @onclick="CancelLogout"></div>

    <!-- Modal -->
    <div class="logout-modal-wrapper">
        <div class="logout-modal-container">
            <!-- Botón X para cerrar -->
            <button class="modal-close-btn" @onclick="CancelLogout">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M18 6L6 18" stroke="#666" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M6 6L18 18" stroke="#666" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
            </button>

            <!-- Título del modal -->
            <div class="modal-header-custom">
                <h3>@Localization["NavBar.Confirm"]</h3>
            </div>

            <!-- Contenido -->
            <div class="modal-body-custom">
                <p class="modal-question">¿Estás seguro de que deseas cerrar sesión?</p>

                <!-- Botones -->
                <div class="modal-buttons">
                    <button class="btn-modal-cancel"
                            @onclick="CancelLogout"
                            disabled="@isProcessing">
                        Cancelar
                    </button>

                    <button class="btn-modal-confirm"
                            @onclick="Logout"
                            disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-logout"></span>
                            <span>Cerrando...</span>
                        }
                        else
                        {
                            <span>Cerrar Sesión</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private bool showLogoutModal = false;
    private bool isTooltipVisible = false;
    private bool isProcessing = false;
    private string userName = "";
    private string customerLogo = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        Localization.OnLanguageChanged += OnLanguageChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showLogoutModal)
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.body.style.overflow = 'hidden';");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.body.style.overflow = '';");
        }
    }

    private async Task LoadUserData()
    {
        var user = await AuthService.GetCurrentUserAsync();
        if (user != null)
        {
            userName = user.Name;
        }
        else
        {
            userName = await LocalStorage.GetItemAsync<string>("name") ?? "Guest";
        }

        customerLogo = await LocalStorage.GetItemAsync<string>("logo") ?? "";
    }

    private void OnLanguageChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void ShowLogoutModal()
    {
        showLogoutModal = true;
        StateHasChanged();
    }

    private async Task CancelLogout()
    {
        showLogoutModal = false;
        await JSRuntime.InvokeVoidAsync("eval", "document.body.style.overflow = '';");
        StateHasChanged();
    }

    private async Task Logout()
    {
        if (isProcessing) return;

        isProcessing = true;
        StateHasChanged();

        try
        {
            await Task.Delay(500); // Pequeña demora para mostrar el spinner
            await AuthService.LogoutAsync();
            Navigation.NavigateTo("/", true);
        }
        finally
        {
            isProcessing = false;
        }
    }

    public void Dispose()
    {
        Localization.OnLanguageChanged -= OnLanguageChanged;
    }
}