@namespace NutrisBlazor.Components.Cover
@using Microsoft.AspNetCore.Components

<div class="cover-container" style="width: 190px; height: 200px;">
    <svg viewBox="0 0 200 200" 
         xmlns="http://www.w3.org/2000/svg" 
         class="cover-metal"
         style="width: 100%; height: 100%;">
        
        <defs>
            <!-- Metallic gradient -->
            <linearGradient id="@metalGradientId" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#ffffff;stop-opacity:1" />
                <stop offset="20%" style="stop-color:@GetMetallicHighlight();stop-opacity:1" />
                <stop offset="40%" style="stop-color:@ColorCover;stop-opacity:1" />
                <stop offset="60%" style="stop-color:@GetDarkerColor();stop-opacity:1" />
                <stop offset="80%" style="stop-color:@ColorCover;stop-opacity:1" />
                <stop offset="100%" style="stop-color:@GetMetallicHighlight();stop-opacity:1" />
            </linearGradient>
            
            <!-- Top surface gradient -->
            <radialGradient id="@topMetalGradientId" cx="40%" cy="40%" r="60%">
                <stop offset="0%" style="stop-color:#ffffff;stop-opacity:0.8" />
                <stop offset="30%" style="stop-color:@GetMetallicHighlight();stop-opacity:1" />
                <stop offset="70%" style="stop-color:@ColorCover;stop-opacity:1" />
                <stop offset="100%" style="stop-color:@GetDarkerColor();stop-opacity:1" />
            </radialGradient>
            
            <!-- Brushed metal texture -->
            <pattern id="@brushedPatternId" x="0" y="0" width="4" height="1" patternUnits="userSpaceOnUse">
                <line x1="0" y1="0" x2="4" y2="0" stroke="@GetDarkerColor()" stroke-width="0.5" opacity="0.2"/>
            </pattern>
        </defs>
        
        <!-- Shadow -->
        <ellipse cx="100" cy="175" rx="50" ry="8" fill="black" opacity="0.2"/>
        
        <!-- Main cap body (shorter for metal cap) -->
        <rect x="50" y="100" width="100" height="40" fill="url(#@metalGradientId)"/>
        
        <!-- Top surface -->
        <ellipse cx="100" cy="100" rx="50" ry="18" fill="url(#@topMetalGradientId)"/>
        
        <!-- Crimped edges (characteristic of metal caps) -->
        @for (int i = 0; i < 20; i++)
        {
            var angle = i * 18;
            var x = 100 + 48 * Math.Cos(angle * Math.PI / 180);
            var y = 140;
            <rect x="@(x - 1.5)" y="@(y - 5)" 
                  width="3" height="10" 
                  fill="@GetDarkerColor()" 
                  transform="rotate(@angle, @x, @y)"/>
        }
        
        <!-- Bottom rim with crimped effect -->
        <ellipse cx="100" cy="140" rx="50" ry="18" fill="@ColorCover"/>
        <ellipse cx="100" cy="140" rx="48" ry="16" fill="none" stroke="@GetDarkerColor()" stroke-width="0.5"/>
        
        <!-- Brushed metal texture overlay -->
        <rect x="50" y="100" width="100" height="40" fill="url(#@brushedPatternId)" opacity="0.5"/>
        
        <!-- Center embossed circle (common in metal caps) -->
        <circle cx="100" cy="100" r="25" fill="none" stroke="@GetDarkerColor()" stroke-width="1" opacity="0.3"/>
        <circle cx="100" cy="100" r="23" fill="none" stroke="@GetLighterColor()" stroke-width="0.5" opacity="0.5"/>
        
        <!-- Specular highlights for metallic look -->
        <ellipse cx="80" cy="90" rx="15" ry="6" fill="white" opacity="0.4"/>
        <ellipse cx="110" cy="105" rx="8" ry="3" fill="white" opacity="0.3"/>
        
       
         
    </svg>
</div>

@code {
    [Parameter] public string ColorCover { get; set; } = "#C0C0C0";
    [Parameter] public string? BrandText { get; set; }
    
    private string metalGradientId = $"metal-gradient-{Guid.NewGuid():N}";
    private string topMetalGradientId = $"top-metal-gradient-{Guid.NewGuid():N}";
    private string brushedPatternId = $"brushed-pattern-{Guid.NewGuid():N}";
    
    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(ColorCover))
        {
            ColorCover = "#C0C0C0"; // Default silver/metal color
        }
    }
    
    private string GetDarkerColor()
    {
        return AdjustColorBrightness(ColorCover, 0.5);
    }
    
    private string GetLighterColor()
    {
        return AdjustColorBrightness(ColorCover, 1.5);
    }
    
    private string GetMetallicHighlight()
    {
        return AdjustColorBrightness(ColorCover, 1.8);
    }
    
    private string AdjustColorBrightness(string hexColor, double factor)
    {
        try
        {
            var color = hexColor.TrimStart('#');
            if (color.Length == 6)
            {
                var r = Convert.ToInt32(color.Substring(0, 2), 16);
                var g = Convert.ToInt32(color.Substring(2, 2), 16);
                var b = Convert.ToInt32(color.Substring(4, 2), 16);
                
                r = Math.Min(255, Math.Max(0, (int)(r * factor)));
                g = Math.Min(255, Math.Max(0, (int)(g * factor)));
                b = Math.Min(255, Math.Max(0, (int)(b * factor)));
                
                return $"#{r:X2}{g:X2}{b:X2}";
            }
        }
        catch { }
        
        return hexColor;
    }
}

<style>
    .cover-container {
        display: inline-block;
        position: relative;
    }
    
    .cover-metal {
        filter: drop-shadow(2px 4px 8px rgba(0, 0, 0, 0.3));
    }
</style>
