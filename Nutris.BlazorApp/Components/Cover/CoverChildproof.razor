@namespace NutrisBlazor.Components.Cover
@using Microsoft.AspNetCore.Components

<div class="cover-container" style="width: 190px; height: 200px;">
    <svg viewBox="0 0 200 200"
         xmlns="http://www.w3.org/2000/svg"
         class="cover-childproof"
         style="width: 100%; height: 100%;">

        <defs>
            <!-- Gradient for 3D effect -->
            <radialGradient id="@topGradientId" cx="50%" cy="40%" r="60%">
                <stop offset="0%" style="stop-color:@GetLighterColor();stop-opacity:1" />
                <stop offset="70%" style="stop-color:@ColorCover;stop-opacity:1" />
                <stop offset="100%" style="stop-color:@GetDarkerColor();stop-opacity:1" />
            </radialGradient>

            <!-- Side gradient -->
            <linearGradient id="@sideGradientId" x1="0%" y1="0%" x2="0%" y2="100%">
                <stop offset="0%" style="stop-color:@GetDarkerColor();stop-opacity:1" />
                <stop offset="50%" style="stop-color:@ColorCover;stop-opacity:1" />
                <stop offset="100%" style="stop-color:@GetDarkerColor();stop-opacity:1" />
            </linearGradient>

            <!-- Pattern for grip texture -->
            <pattern id="@gripPatternId" x="0" y="0" width="8" height="8" patternUnits="userSpaceOnUse">
                <rect x="0" y="0" width="4" height="4" fill="@GetDarkerColor()" opacity="0.3" />
                <rect x="4" y="4" width="4" height="4" fill="@GetDarkerColor()" opacity="0.3" />
            </pattern>
        </defs>

        <!-- Shadow -->
        <ellipse cx="100" cy="180" rx="55" ry="10" fill="black" opacity="0.15" />

        <!-- Main cap body (cylinder) -->
        <rect x="45" y="80" width="110" height="60" fill="url(#@sideGradientId)" />

        <!-- Top surface -->
        <ellipse cx="100" cy="80" rx="55" ry="20" fill="url(#@topGradientId)" />

        <!-- Child safety ridges (vertical lines for grip) -->
        @for (int i = 0; i < 12; i++)
        {
            var angle = i * 30;
            var x = 100 + 50 * Math.Cos(angle * Math.PI / 180);
            var y = 110;
            <rect x="@(x - 2)" y="@(y - 20)"
                  width="4" height="40"
                  fill="@GetDarkerColor()"
                  opacity="0.2"
                  transform="rotate(@angle, @x, @y)" />
        }

        <!-- Bottom rim -->
        <ellipse cx="100" cy="140" rx="55" ry="20" fill="@ColorCover" />
        <ellipse cx="100" cy="140" rx="50" ry="18" fill="none" stroke="@GetDarkerColor()" stroke-width="1" opacity="0.3" />

        <!-- Push and turn arrows (childproof indicator) -->
        <g transform="translate(100, 80)">
            <!-- Down arrow -->
            <path d="M -8,-15 L -8,-5 L -12,-5 L 0,5 L 12,-5 L 8,-5 L 8,-15 Z"
                  fill="white"
                  opacity="0.7" />
            <!-- Curved arrow for turn -->
            <path d="M 15,-5 A 15 15 0 0 1 15,5"
                  fill="none"
                  stroke="white"
                  stroke-width="3"
                  stroke-linecap="round"
                  opacity="0.7" />
            <path d="M 15,5 L 18,2 L 12,2 Z"
                  fill="white"
                  opacity="0.7" />
        </g>

        <!-- Highlight for plastic effect -->
        <ellipse cx="85" cy="70" rx="20" ry="8" fill="white" opacity="0.3" />

        <!-- Grip texture on sides -->
        <rect x="45" y="90" width="110" height="40" fill="url(#@gripPatternId)" opacity="0.5" />
    </svg>
</div>

@code {
    [Parameter] public string ColorCover { get; set; } = "#FF6B6B";

    private string topGradientId = $"top-gradient-{Guid.NewGuid():N}";
    private string sideGradientId = $"side-gradient-{Guid.NewGuid():N}";
    private string gripPatternId = $"grip-pattern-{Guid.NewGuid():N}";

    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(ColorCover))
        {
            ColorCover = "#FF6B6B"; // Default red color for safety cap
        }
    }

    private string GetDarkerColor()
    {
        return AdjustColorBrightness(ColorCover, 0.6);
    }

    private string GetLighterColor()
    {
        return AdjustColorBrightness(ColorCover, 1.4);
    }

    private string AdjustColorBrightness(string hexColor, double factor)
    {
        try
        {
            var color = hexColor.TrimStart('#');
            if (color.Length == 6)
            {
                var r = Convert.ToInt32(color.Substring(0, 2), 16);
                var g = Convert.ToInt32(color.Substring(2, 2), 16);
                var b = Convert.ToInt32(color.Substring(4, 2), 16);

                r = Math.Min(255, Math.Max(0, (int)(r * factor)));
                g = Math.Min(255, Math.Max(0, (int)(g * factor)));
                b = Math.Min(255, Math.Max(0, (int)(b * factor)));

                return $"#{r:X2}{g:X2}{b:X2}";
            }
        }
        catch { }

        return hexColor;
    }
}

<style>
    .cover-container {
        display: inline-block;
        position: relative;
    }

    .cover-childproof {
        filter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.2));
    }
</style>
