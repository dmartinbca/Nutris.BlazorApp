@using NutrisBlazor.Services
@using NutrisBlazor.Components.Shared.Bottles
@using NutrisBlazor.Components.Cover
@inject IBoteCapService BoteCapService

@if (!IsVisible)
{
    return;
}

<div class="modal-root">
    <div class="modal-header">
        <h2>Packaging/Envasado</h2>
        <button class="close" @onclick="OnClose">×</button>
    </div>

    <div class="tabs">
        <button class="tab @(IsBottleTab ? "active" : "")" @onclick="() => IsBottleTab = true">Bote</button>
        <button class="tab @(!IsBottleTab ? "active" : "")" @onclick="() => IsBottleTab = false">Tapa</button>
    </div>

    <div class="modal-body">
        @if (IsBottleTab)
        {
            <div class="grid-2">
                <section class="preview-section">
                    <h3 class="section-title">Características</h3>

                    <button class="reset-filters-btn" @onclick="ResetFilters">
                        <img src="/img/refresh.svg" alt="" aria-hidden="true" />
                        Resetear filtro
                    </button>

                    <div class="preview-content">
                        @* Dimensiones alrededor del SVG (opcional: muestra valores) *@
                        <div class="dimension-vertical">
                            <div class="dimension-line"></div>
                            <span class="dimension-value">@GetAlturaText()</span>
                        </div>

                        <div class="bottle-visual-wrapper">
                            <div class="dimension-horizontal-top">
                                <span class="dimension-value">@GetDiamBocaText()</span>
                            </div>

                            @switch (BoteConfig.Forma?.ToUpper())
                            {
                                case "ROUND":
                                    <BoteRound ColorBote="@GetBoteHexColor()" />
                                    break;
                                case "SQUARE":
                                    <BoteSquare ColorBote="@GetBoteHexColor()" />
                                    break;
                                case "CYLINDRICAL":
                                    <BoteCylindrical ColorBote="@GetBoteHexColor()" />
                                    break;
                                default:
                                    <div class="empty-preview"><p>Forma no soportada.</p></div>
                                    break;
                            }

                            <div class="dimension-horizontal-bottom">
                                <span class="dimension-value">@GetDiamBaseText()</span>
                            </div>
                        </div>
                    </div>
                </section>

                <section class="form-section">
                    <div class="field">
                        <label>Forma</label>
                        <div class="segmented">
                            <button type="button"
                                    class="segmented-item @(BoteConfig.Forma=="ROUND"?"active":"")"
                                    @onclick="() => { BoteConfig.Forma="ROUND"; OnCapacityChangedCore(); }">Round</button>
                            <button type="button"
                                    class="segmented-item @(BoteConfig.Forma=="SQUARE"?"active":"")"
                                    @onclick="() => { BoteConfig.Forma="SQUARE"; OnCapacityChangedCore(); }">Square</button>
                            <button type="button"
                                    class="segmented-item @(BoteConfig.Forma=="CYLINDRICAL"?"active":"")"
                                    @onclick="() => { BoteConfig.Forma="CYLINDRICAL"; OnCapacityChangedCore(); }">Cylindrical</button>
                        </div>
                    </div>

                    <div class="field">
                        <label>Capacidad *</label>
                        <InputSelect @bind-Value="BoteConfig.Capacidad" @onchange="(_) => OnCapacityChangedCore()">
                            @foreach (var cap in CapacidadOptions)
                            {
                                <option value="@cap">@cap</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="field">
                        <label>Diámetro *</label>
                        <InputSelect @bind-Value="BoteConfig.Diametro" @onchange="(_) => OnCapacityChangedCore()">
                            @foreach (var d in DiametroOptions)
                            {
                                <option value="@d">@d</option>
                            }
                        </InputSelect>
                        <small class="hint">Sincronizado con diámetro de tapa</small>
                    </div>

                    <div class="field">
                        <label>Material *</label>
                        <InputSelect @bind-Value="BoteConfig.Material">
                            @foreach (var m in MaterialOptions)
                            {
                                <option value="@m">@m</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="field">
                        <label>Color *</label>
                        <InputSelect @bind-Value="BoteConfig.Color">
                            @foreach (var c in OptionsColorBote)
                            {
                                <option value="@c.Label">@c.Label</option>
                            }
                        </InputSelect>
                    </div>
                </section>
            </div>
        }
        else
        {
            <div class="grid-2">
                <section class="preview-section">
                    <h3 class="section-title">Características</h3>

                    <div class="preview-content">
                        <div class="bottle-visual-wrapper">
                            @switch (CapConfig.Forma?.ToUpper())
                            {
                                case "SIMPLE":
                                    <CoverSimple ColorCover="@GetCapHexColor()" />
                                    break;
                                case "METAL":
                                    <CoverMetal ColorCover="@GetCapHexColor()" />
                                    break;
                                case "CHILDPROFF":
                                    <CoverChildproff ColorCover="@GetCapHexColor()" />
                                    break;
                                default:
                                    <div class="empty-preview"><p>Tipo de tapa no soportado.</p></div>
                                    break;
                            }
                        </div>
                    </div>
                </section>

                <section class="form-section">
                    <div class="field">
                        <label>Forma *</label>
                        <div class="segmented">
                            <button type="button"
                                    class="segmented-item @(CapConfig.Forma=="SIMPLE"?"active":"")"
                                    @onclick="() => { CapConfig.Forma="SIMPLE"; StateHasChanged(); }">Simple</button>
                            <button type="button"
                                    class="segmented-item @(CapConfig.Forma=="METAL"?"active":"")"
                                    @onclick="() => { CapConfig.Forma="METAL"; StateHasChanged(); }">Metal</button>
                            <button type="button"
                                    class="segmented-item @(CapConfig.Forma=="CHILDPROFF"?"active":"")"
                                    @onclick="() => { CapConfig.Forma="CHILDPROFF"; StateHasChanged(); }">Childproff</button>
                        </div>
                    </div>

                    <div class="field">
                        <label>Diámetro *</label>
                        <InputSelect @bind-Value="CapConfig.Diametro">
                            @foreach (var d in DiametroOptions)
                            {
                                <option value="@d">@d</option>
                            }
                        </InputSelect>
                        <small class="hint">Sincronizado con el bote</small>
                    </div>

                    <div class="field">
                        <label>Color *</label>
                        <InputSelect @bind-Value="CapConfig.Color">
                            @foreach (var c in OptionsColorCover)
                            {
                                <option value="@c.Label">@c.Label</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="field">
                        <label class="checkbox">
                            <input type="checkbox" @bind="CapConfig.Sleeve" />
                            Sleeve (anillo de seguridad)
                        </label>
                    </div>
                </section>
            </div>
        }
    </div>

    <div class="modal-footer actions">
        <button type="button" class="btn btn-cancel" @onclick="OnClose">Cancelar</button>
        <button type="button" class="btn btn-primary" @onclick="SaveAsync">Guardar</button>
    </div>
</div>

@code {
    // ===== Parámetros esperados desde el padre =====
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public string CodeRG35 { get; set; } = string.Empty;
    [Parameter] public string Characteristics { get; set; } = string.Empty;

    // Si el padre te pasa opciones/selecciones, las dejamos como opcionales
    [Parameter] public object? SelectedOption { get; set; }
    [Parameter] public object? SelectedOptionCap { get; set; }

    // ===== Estado UI =====
    private bool IsBottleTab { get; set; } = true;

    // Configuraciones (internas del modal)
    private BoteConfigModel BoteConfig { get; set; } = new();
    private CapConfigModel  CapConfig  { get; set; } = new();

    // Lookups cargados del servicio
    private List<string> CapacidadOptions { get; set; } = new();
    private Dictionary<string, List<string>> CapacidadToDiametros { get; set; } = new();
    private List<string> DiametroOptions { get; set; } = new();
    private List<string> MaterialOptions { get; set; } = new();
    private List<ColorOption> OptionsColorBote { get; set; } = new();
    private List<ColorOption> OptionsColorCover { get; set; } = new();

    private Dictionary<string, Dictionary<string, BoteDimension>> DimensionsMap { get; set; } = new();
    private BoteDimension? CurrentBoteDimension;

    protected override async Task OnInitializedAsync()
    {
        await LoadLookupsAsync();
        await base.OnInitializedAsync();
    }

    private async Task LoadLookupsAsync()
    {
        // 1) Lookups (capacidad, material, colores, relación capacidad->diámetros)
        var lk = await BoteCapService.LoadLookupsAsync();
        CapacidadOptions     = lk.Capacidades ?? new();
        CapacidadToDiametros = lk.CapacidadToDiametros ?? new();
        MaterialOptions      = lk.Materiales ?? new();
        OptionsColorBote     = lk.ColoresBote ?? new();
        OptionsColorCover    = lk.ColoresTapa ?? new();

        // 2) Dimensiones (altura/base/boca)
        DimensionsMap = await BoteCapService.LoadDimensionsAsync() ?? new();

        // 3) Inicializa estado
        NormalizeForma();
        ResetIfEmpty();
        OnCapacityChangedCore();
        StateHasChanged();
    }

    private void ResetIfEmpty()
    {
        if (string.IsNullOrWhiteSpace(BoteConfig.Forma))     BoteConfig.Forma = "ROUND";
        if (string.IsNullOrWhiteSpace(BoteConfig.Capacidad)) BoteConfig.Capacidad = CapacidadOptions.FirstOrDefault() ?? "150";
        if (string.IsNullOrWhiteSpace(BoteConfig.Material))  BoteConfig.Material  = MaterialOptions.FirstOrDefault() ?? "PET";
        if (string.IsNullOrWhiteSpace(BoteConfig.Color))     BoteConfig.Color     = OptionsColorBote.FirstOrDefault()?.Label ?? "Clear";

        if (string.IsNullOrWhiteSpace(CapConfig.Forma))      CapConfig.Forma      = "SIMPLE";
        if (string.IsNullOrWhiteSpace(CapConfig.Color))      CapConfig.Color      = OptionsColorCover.FirstOrDefault()?.Label ?? "Black";
    }

    private void NormalizeForma()
    {
        string f = (BoteConfig.Forma ?? "").Trim().ToUpperInvariant();
        if (f is "REDONDO") f = "ROUND";
        if (f is "CUADRADO") f = "SQUARE";
        if (f is "CILINDRICO" or "CILÍNDRICO" or "CYL") f = "CYLINDRICAL";
        if (string.IsNullOrWhiteSpace(f)) f = "ROUND";
        BoteConfig.Forma = f;

        string fc = (CapConfig.Forma ?? "").Trim().ToUpperInvariant();
        if (fc is "SIMPLE" or "BASIC") fc = "SIMPLE";
        if (fc is "METALICA" or "METÁLICA") fc = "METAL";
        if (fc is "CHILDPROOF" or "NINOS" or "NIÑOS") fc = "CHILDPROFF";
        if (string.IsNullOrWhiteSpace(fc)) fc = "SIMPLE";
        CapConfig.Forma = fc;
    }

    private void OnCapacityChangedCore()
    {
        var cap = BoteConfig.Capacidad ?? CapacidadOptions.FirstOrDefault() ?? "150";

        if (!CapacidadToDiametros.TryGetValue(cap, out var list))
            list = new() { "D45" };

        DiametroOptions = list;

        if (string.IsNullOrWhiteSpace(BoteConfig.Diametro) || !DiametroOptions.Contains(BoteConfig.Diametro))
            BoteConfig.Diametro = DiametroOptions[0];

        // Sincroniza tapa por diámetro
        CapConfig.Diametro = BoteConfig.Diametro;

        // Dimensiones
        if (DimensionsMap.TryGetValue(cap, out var byDia) && byDia.TryGetValue(BoteConfig.Diametro, out var dim))
            CurrentBoteDimension = dim;
        else
            CurrentBoteDimension = null;
    }

    private void ResetFilters()
    {
        BoteConfig.Forma     = "ROUND";
        BoteConfig.Capacidad = CapacidadOptions.FirstOrDefault() ?? "150";
        BoteConfig.Diametro  = "D45";
        BoteConfig.Material  = MaterialOptions.FirstOrDefault() ?? "PET";
        BoteConfig.Color     = OptionsColorBote.FirstOrDefault()?.Label ?? "Clear";

        CapConfig.Forma      = "SIMPLE";
        CapConfig.Diametro   = BoteConfig.Diametro;
        CapConfig.Color      = OptionsColorCover.FirstOrDefault()?.Label ?? "Black";
        CapConfig.Sleeve     = false;

        NormalizeForma();
        OnCapacityChangedCore();
        StateHasChanged();
    }

    // Render helpers
    private string GetBoteHexColor()
        => OptionsColorBote.FirstOrDefault(c => c.Label == BoteConfig.Color)?.Hex ?? "#CCCCCC";

    private string GetCapHexColor()
        => OptionsColorCover.FirstOrDefault(c => c.Label == CapConfig.Color)?.Hex ?? "#000000";

    private string GetAlturaText()   => (CurrentBoteDimension?.Altura ?? 0).ToString("0.0")  + " mm";
    private string GetDiamBaseText() => (CurrentBoteDimension?.DiametroBase ?? 0).ToString("0.0")  + " mm";
    private string GetDiamBocaText() => (CurrentBoteDimension?.DiametroBoca ?? 0).ToString("0.00") + " mm";

    private async Task SaveAsync()
    {
        var cfg = new BoteCapConfiguration
        {
            BoteForma = BoteConfig.Forma,
            BoteCapacidad = BoteConfig.Capacidad,
            BoteDiametro = BoteConfig.Diametro,
            BoteMaterial = BoteConfig.Material,
            BoteColor = BoteConfig.Color,
            TapaForma = CapConfig.Forma,
            TapaDiametro = CapConfig.Diametro,
            TapaColor = CapConfig.Color,
            TapaSleeve = CapConfig.Sleeve
        };

        await BoteCapService.SaveConfigurationAsync(cfg, CodeRG35);
        if (OnClose.HasDelegate) await OnClose.InvokeAsync();
    }

    // ===== Modelos internos =====
    private class BoteConfigModel
    {
        public string Forma { get; set; } = "ROUND";
        public string Capacidad { get; set; } = "150";
        public string Diametro { get; set; } = "D45";
        public string Material { get; set; } = "PET";
        public string Color { get; set; } = "Clear";
    }

    private class CapConfigModel
    {
        public string Forma { get; set; } = "SIMPLE";
        public string Diametro { get; set; } = "D45";
        public string Color { get; set; } = "Black";
        public bool Sleeve { get; set; } = false;
    }
}
