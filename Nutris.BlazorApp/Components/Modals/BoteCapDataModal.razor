@* -------------------------------------------------------------
   BoteCapDataModal.razor — modal lateral derecho estilo Vue
   ------------------------------------------------------------- *@

@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.Generic
@using System.Linq

@using Nutris.BlazorApp.Components.Shared.Bote
@using Nutris.BlazorApp.Components.Shared.Cover
@using NutrisBlazor.Components.Shared

<link href="css/BoteCapDataModal.css" rel="stylesheet" />

@if (IsVisible)
{
    <!-- Backdrop -->
    <div class="modal-backdrop-custom" @onclick="HideModal"></div>

    <!-- Modal Container -->
    <div class="modal-custom show">
        <div class="modal-dialog-custom">
            <div class="modal-content-custom">

                <!-- Header -->
                <div class="modal-header">
                    <h2 class="modal-title">Packaging/Envasado</h2>
                    <button type="button" class="btn-close" @onclick="HideModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <!-- Tabs -->
                <div class="modal-body_header">
                    <div class="custom-tabs">
                        <button class="nav-link @(IsBottleTab ? "active bottle-tab" : "")"
                                @onclick="() => IsBottleTab = true">
                            BOTE
                        </button>
                        <button class="nav-link @(!IsBottleTab ? "active cap-tab" : "")"
                                @onclick="() => IsBottleTab = false">
                            TAPA
                        </button>
                    </div>
                </div>

                <!-- Body -->
                <div class="modal-body">
                    @if (IsBottleTab)
                    {
                        <!-- BOTE TAB -->
                        <div class="config-container">
                            <div class="preview-section">
                                <h3 class="section-title">Características</h3>

                                <button class="reset-filters-btn" @onclick="ResetFilters">
                                    <img src="img/refresh.svg" alt="" aria-hidden="true" />
                                    Resetear filtro
                                </button>

                                <div class="preview-content">
                                    <!-- Dimensiones verticales -->
                                    <div class="dimension-vertical" style="position: absolute; left: 20px; top: 50%; transform: translateY(-50%);">
                                        <div style="height: 280px; border-left: 1px solid #ccc; position: relative;">
                                            <span style="position: absolute; left: -50px; top: 50%; transform: translateY(-50%); font-size: 14px;">
                                                @GetAlturaText()
                                            </span>
                                        </div>
                                    </div>

                                    <div class="bottle-visual-wrapper">
                                        <!-- Dimensión superior -->
                                        <div style="position: absolute; top: 20px; width: 100%; text-align: center;">
                                            <span style="font-size: 14px;">@GetDiamBocaText()</span>
                                        </div>

                                        <!-- Botella según forma -->
                                        @switch (BoteConfig.Forma?.ToUpper())
                                        {
                                            case "ROUND":
                                                <BoteRound @key="(BoteConfig.Forma, BoteConfig.Color)" ColorBote="@GetBoteHexColor()" />
                                                break;
                                            case "SQUARE":
                                                <BoteSquare @key="(BoteConfig.Forma, BoteConfig.Color)" ColorBote="@GetBoteHexColor()" />
                                                break;
                                            case "CYLINDRICAL":
                                                <BoteCylindrical @key="(BoteConfig.Forma, BoteConfig.Color)" ColorBote="@GetBoteHexColor()" />
                                                break;
                                        }

                                        <!-- Dimensión inferior -->
                                        <div style="position: absolute; bottom: 20px; width: 100%; text-align: center;">
                                            <span style="font-size: 14px;">@GetDiamBaseText()</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="form-section">
                                <!-- Forma -->
                                <div class="field">
                                    <label class="form-label">Forma</label>
                                    <div class="segmented">
                                        <button type="button"
                                                class="segmented-item @(BoteConfig.Forma == "ROUND" ? "active" : "")"
                                                @onclick='() => SetFormaBote("ROUND")'>
                                            <span class="radio-icon"></span>
                                            Round
                                        </button>
                                        <button type="button"
                                                class="segmented-item @(BoteConfig.Forma == "SQUARE" ? "active" : "")"
                                                @onclick='() => SetFormaBote("SQUARE")'>
                                            <span class="radio-icon"></span>
                                            Square
                                        </button>
                                        <button type="button"
                                                class="segmented-item @(BoteConfig.Forma == "CYLINDRICAL" ? "active" : "")"
                                                @onclick='() => SetFormaBote("CYLINDRICAL")'>
                                            <span class="radio-icon"></span>
                                            Cylindrical
                                        </button>
                                    </div>
                                </div>

                                <!-- Tamaño -->
                                <div class="field">
                                    <label class="form-label">Tamaño</label>
                                    <InputSelect TValue="string" @bind-Value="BoteConfig.Capacidad" @onchange="OnCapacityChanged">
                                        @foreach (var cap in CapacidadOptionsFiltered)
                                        {
                                            <option value="@cap">@cap</option>
                                        }
                                    </InputSelect>
                                </div>

                                <!-- Diámetro -->
                                <div class="field">
                                    <label class="form-label">Diámetro</label>
                                    <InputSelect TValue="string" @bind-Value="BoteConfig.Diametro" @onchange="OnDiametroChanged">
                                        @foreach (var d in DiametroOptionsFiltered)
                                        {
                                            <option value="@d">@d</option>
                                        }
                                    </InputSelect>
                                </div>

                                <!-- Material -->
                                <div class="field">
                                    <label class="form-label">Material</label>
                                    <InputSelect TValue="string" @bind-Value="BoteConfig.Material" @onchange="OnMaterialChanged">
                                        @foreach (var m in MaterialOptionsFiltered)
                                        {
                                            <option value="@m">@m</option>
                                        }
                                    </InputSelect>
                                </div>

                                <!-- Tipo (Color) -->
                                <div class="field">
                                    <label class="form-label">Tipo</label>
                                    <InputSelect TValue="string" @bind-Value="BoteConfig.Color" @onchange="OnBoteColorChanged">
                                        @foreach (var c in OptionsColorBoteFiltered)
                                        {
                                            <option value="@(c.Label ?? c.Value)">@(c.Label ?? c.Value)</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- TAPA TAB -->
                        <div class="config-container">
                            <div class="preview-section cap-preview">
                                <h3 class="section-title">Características</h3>

                                <div class="preview-content">
                                    <div class="bottle-visual-wrapper">
                                        @switch (CapConfig.Forma?.ToUpper())
                                        {
                                            case "SIMPLE":
                                                <CoverSimple @key="(CapConfig.Forma, CapConfig.Color, CapConfig.Diametro)" ColorCover="@GetCapHexColor()" />
                                                break;

                                            case "METAL":
                                                <CoverMetal @key="(CapConfig.Forma, CapConfig.Color, CapConfig.Diametro)" ColorCover="@GetCapHexColor()" />
                                                break;

                                            case "CHILDPROFF":
                                                <CoverChildproff @key="(CapConfig.Forma, CapConfig.Color, CapConfig.Diametro)" ColorCover="@GetCapHexColor()" />
                                                break;
                                        }

                                    </div>
                                </div>
                            </div>

                            <div class="form-section">
                                <!-- Forma -->
                                <div class="field">
                                    <label class="form-label">Forma</label>
                                    <div class="segmented">
                                        <button type="button"
                                                class="segmented-item @(CapConfig.Forma == "SIMPLE" ? "active" : "")"
                                                @onclick='() => SetFormaCap("SIMPLE")'>
                                            <span class="radio-icon"></span>
                                            Simple
                                        </button>
                                        <button type="button"
                                                class="segmented-item @(CapConfig.Forma == "METAL" ? "active" : "")"
                                                @onclick='() => SetFormaCap("METAL")'>
                                            <span class="radio-icon"></span>
                                            Metal
                                        </button>
                                        <button type="button"
                                                class="segmented-item @(CapConfig.Forma == "CHILDPROFF" ? "active" : "")"
                                                @onclick='() => SetFormaCap("CHILDPROFF")'>
                                            <span class="radio-icon"></span>
                                            Childproff
                                        </button>
                                    </div>
                                </div>

                                <!-- Diámetro (sincronizado con el bote) -->
                                <div class="field">
                                    <label class="form-label">Diámetro</label>
                                    <InputSelect TValue="string" @bind-Value="CapConfig.Diametro" disabled>
                                        @foreach (var d in DiametroOptionsFiltered)
                                        {
                                            <option value="@d">@d</option>
                                        }
                                    </InputSelect>
                                    <small class="hint">Sincronizado con el bote</small>
                                </div>

                                <!-- Color -->
                                <div class="field">
                                    <label class="form-label">Color</label>
                                    <InputSelect TValue="string" @bind-Value="CapConfig.Color" @onchange="OnCapColorChanged">
                                        @foreach (var c in OptionsColorCoverFiltered)
                                        {
                                            <option value="@(c.Label ?? c.Value)">@(c.Label ?? c.Value)</option>
                                        }
                                    </InputSelect>
                                </div>

                                <!-- Sleeve -->
                                <div class="field">
                                    <label class="checkbox">
                                        <input type="checkbox" @bind="CapConfig.Sleeve" />
                                        <span>Sleeve (anillo de seguridad)</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Footer -->
                <div class="modal-footer">
                    <button type="button" class="btn-cancel" @onclick="HideModal">Cancelar</button>
                    <button type="button" class="btn-primary" @onclick="SaveAsync">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // ===== Props =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback<(BoteDataItem Bote, CapDataItem Cap)> OnSaveData { get; set; }
    // Props de datos
    [Parameter] public BoteDataItem? SelectedOption { get; set; }
    [Parameter] public CapDataItem? SelectedOptionCap { get; set; }
    [Parameter] public IEnumerable<CapDataItem>? CapData { get; set; }
    [Parameter] public IEnumerable<BoteDataItem>? BoteData { get; set; }
    [Parameter] public string CodeRG35 { get; set; } = string.Empty;
    [Parameter] public IEnumerable<ColorOption>? OptionsColorBote { get; set; }
    [Parameter] public IEnumerable<ColorOption>? OptionsColorCover { get; set; }
    [Parameter] public string Characteristics { get; set; } = string.Empty;
    [Parameter] public EventCallback<bool> SetAccordionOpen { get; set; }

    // Props opcionales (fallbacks externos)
    [Parameter] public IEnumerable<string>? Capacidades { get; set; }
    [Parameter] public Dictionary<string, List<string>>? CapacidadToDiametros { get; set; }
    [Parameter] public IEnumerable<string>? Materiales { get; set; }

    // ===== Estado =====
    private bool IsBottleTab { get; set; } = true;
    private BoteConfigModel BoteConfig { get; set; } = new();
    private CapConfigModel CapConfig { get; set; } = new();

    // Fallbacks UI por defecto (si no llegan datos/colores)
    private List<string> CapacidadOptionsUI { get; set; } = new() { "150", "200", "250", "300", "400", "500", "600", "1000" };
    private Dictionary<string, List<string>> CapacidadToDiametrosUI { get; set; } = new()
    {
        ["150"] = new() { "D45" },
        ["200"] = new() { "D45" },
        ["250"] = new() { "D45" },
        ["300"] = new() { "D45" },
        ["400"] = new() { "D45" },
        ["500"] = new() { "D45" },
        ["600"] = new() { "D45" },
        ["1000"] = new() { "D45" },
    };
    private List<string> DiametroOptionsUI { get; set; } = new() { "D45" };
    private List<string> MaterialOptionsUI { get; set; } = new() { "PET", "HDPE", "PP" };

    private List<ColorOption> OptionsColorBoteUI { get; set; } = new()
    {
        new("Clear", "#CCCCCC"), new("Amber", "#FFBF00"), new("Black", "#000000"), new("White","#FFFFFF")
    };
    private List<ColorOption> OptionsColorCoverUI { get; set; } = new()
    {
        new("White", "#FFFFFF"), new("Black", "#000000"), new("Blue", "#0D6EFD")
    };

    // ====================== NORMALIZACIONES ======================
    private static string N(string? s) => (s ?? "").Trim();
    private static string NUp(string? s) => N(s).ToUpperInvariant();

    private static string NormFormaBote(string? f)
    {
        f = NUp(f);
        return f switch
        {
            "REDONDO" => "ROUND",
            "CUADRADO" => "SQUARE",
            "CILINDRICO" or "CILÍNDRICO" or "CYL" => "CYLINDRICAL",
            "" => "ROUND",
            _ => f
        };
    }
    private static string NormFormaCap(string? f)
    {
        f = NUp(f);
        return f switch
        {
            "BASIC" => "SIMPLE",
            "METÁLICA" or "METALICA" => "METAL",
            "CHILDPROOF" or "NIÑOS" or "NINOS" => "CHILDPROFF",
            "" => "SIMPLE",
            _ => f
        };
    }
    private static string NormDiam(string? d) => NUp(d);

    // ====================== LISTAS FILTRADAS PARA LOS SELECT ======================
    private List<string> CapacidadOptionsFiltered = new();
    private List<string> DiametroOptionsFiltered = new();
    private List<string> MaterialOptionsFiltered = new();
    private List<ColorOption> OptionsColorBoteFiltered = new();
    private List<ColorOption> OptionsColorCoverFiltered = new();

    private BoteDimension? CurrentBoteDimension;

    // ====================== RECOMPUTES (CASCADA) ======================
    // 1) BOTE: Forma → Capacidad → Diámetro → Material → Color
    private void RecomputeBottleFilters()
    {
        BoteConfig.Forma = NormFormaBote(BoteConfig.Forma);
        var forma = BoteConfig.Forma;

        var dataForma = (BoteData ?? Enumerable.Empty<BoteDataItem>())
            .Where(b => NormFormaBote(b.Forma) == forma)
            .ToList();

        // Capacidades por forma
        CapacidadOptionsFiltered = dataForma
            .Select(b => N(b.Capacidad))
            .Where(s => s != "")
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(c => int.TryParse(c, out var n) ? n : int.MaxValue)
            .ThenBy(c => c, StringComparer.OrdinalIgnoreCase)
            .ToList();

        if (!CapacidadOptionsFiltered.Contains(N(BoteConfig.Capacidad), StringComparer.OrdinalIgnoreCase))
            BoteConfig.Capacidad = CapacidadOptionsFiltered.FirstOrDefault() ?? BoteConfig.Capacidad;

        var capSel = N(BoteConfig.Capacidad);

        // Diámetros por (forma, capacidad)
        var dataCap = dataForma.Where(b => N(b.Capacidad).Equals(capSel, StringComparison.OrdinalIgnoreCase)).ToList();

        DiametroOptionsFiltered = dataCap
            .Select(b => NormDiam(b.Diametro))
            .Where(s => s != "")
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(d => d, StringComparer.OrdinalIgnoreCase)
            .ToList();

        if (!DiametroOptionsFiltered.Contains(NormDiam(BoteConfig.Diametro), StringComparer.OrdinalIgnoreCase))
            BoteConfig.Diametro = DiametroOptionsFiltered.FirstOrDefault() ?? BoteConfig.Diametro;

        var diaSel = NormDiam(BoteConfig.Diametro);

        // Materiales por (forma, capacidad, diámetro)
        var dataCapDia = dataCap.Where(b => NormDiam(b.Diametro) == diaSel).ToList();

        MaterialOptionsFiltered = dataCapDia
            .Select(b => N(b.Material))
            .Where(s => s != "")
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(m => m, StringComparer.OrdinalIgnoreCase)
            .ToList();

        if (!MaterialOptionsFiltered.Contains(N(BoteConfig.Material), StringComparer.OrdinalIgnoreCase))
            BoteConfig.Material = MaterialOptionsFiltered.FirstOrDefault() ?? BoteConfig.Material;

        // Colores por (forma, capacidad, diámetro, material)
        var dataCapDiaMat = dataCapDia.Where(b => N(b.Material).Equals(N(BoteConfig.Material), StringComparison.OrdinalIgnoreCase)).ToList();
        var colorNames = dataCapDiaMat
            .Select(b => N(b.Color))
            .Where(s => s != "")
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(c => c, StringComparer.OrdinalIgnoreCase)
            .ToList();

        OptionsColorBoteFiltered = MapNamesToColorOptions(colorNames, OptionsColorBote ?? OptionsColorBoteUI);

        if (!OptionsColorBoteFiltered.Any(o => string.Equals((o.Label ?? o.Value), BoteConfig.Color, StringComparison.OrdinalIgnoreCase)))
            BoteConfig.Color = OptionsColorBoteFiltered.FirstOrDefault()?.Label
                            ?? OptionsColorBoteFiltered.FirstOrDefault()?.Value
                            ?? BoteConfig.Color;

        // Sincroniza diámetro de tapa con el del bote
        CapConfig.Diametro = BoteConfig.Diametro;

        // Actualiza dimensiones (fallback si no hay en tabla)
        var cap = string.IsNullOrWhiteSpace(BoteConfig.Capacidad) ? "150" : BoteConfig.Capacidad;
        if (DimensionsMap.TryGetValue(cap, out var byDia) && byDia.TryGetValue(BoteConfig.Diametro, out var dim))
            CurrentBoteDimension = dim;
        else
            CurrentBoteDimension = null;
    }

    // 2) TAPA: preferentemente por forma + diámetro; si no hay, relaja a “cualquier forma” con ese diámetro
    private void RecomputeCapFilters()
    {
        CapConfig.Forma = NormFormaCap(CapConfig.Forma);
        var diaSel = NormDiam(BoteConfig.Diametro);

        var capsAll = (CapData ?? Enumerable.Empty<CapDataItem>())
            .Where(c => NormDiam(c.Diametro) == diaSel);

        var capsByForma = capsAll.Where(c => NormFormaCap(c.Forma) == CapConfig.Forma).ToList();
        var usable = capsByForma.Count > 0 ? capsByForma : capsAll.ToList();

        var colorNames = usable
            .Select(c => N(c.Color))
            .Where(s => s != "")
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(c => c, StringComparer.OrdinalIgnoreCase)
            .ToList();

        OptionsColorCoverFiltered = MapNamesToColorOptions(colorNames, OptionsColorCover ?? OptionsColorCoverUI);

        if (!OptionsColorCoverFiltered.Any(o => string.Equals((o.Label ?? o.Value), CapConfig.Color, StringComparison.OrdinalIgnoreCase)))
            CapConfig.Color = OptionsColorCoverFiltered.FirstOrDefault()?.Label
                           ?? OptionsColorCoverFiltered.FirstOrDefault()?.Value
                           ?? CapConfig.Color;
    }

    private void RecomputeAllFilters()
    {
        RecomputeBottleFilters();
        RecomputeCapFilters();
        StateHasChanged();
    }

    // ===== Handlers =====
    private void SetFormaBote(string forma) { BoteConfig.Forma = forma; RecomputeAllFilters(); }
    private void OnCapacityChanged(ChangeEventArgs e) { BoteConfig.Capacidad = e?.Value?.ToString() ?? BoteConfig.Capacidad; RecomputeAllFilters(); }
    private void OnDiametroChanged(ChangeEventArgs e) { BoteConfig.Diametro = e?.Value?.ToString() ?? BoteConfig.Diametro; RecomputeAllFilters(); }
    private void OnMaterialChanged(ChangeEventArgs e) { BoteConfig.Material = e?.Value?.ToString() ?? BoteConfig.Material; RecomputeAllFilters(); }

    private void SetFormaCap(string forma) { CapConfig.Forma = forma; RecomputeCapFilters(); StateHasChanged(); }
    private void OnBoteColorChanged(ChangeEventArgs e) { BoteConfig.Color = e?.Value?.ToString() ?? BoteConfig.Color; StateHasChanged(); }
    private void OnCapColorChanged(ChangeEventArgs e) { CapConfig.Color = e?.Value?.ToString() ?? CapConfig.Color; StateHasChanged(); }

    // ===== Ciclo de vida =====
    protected override void OnParametersSet()
    {
        // Inyectar lookups/colores externos si vienen
        if (Capacidades?.Any() == true) CapacidadOptionsUI = Capacidades.ToList();
        if (CapacidadToDiametros is not null) CapacidadToDiametrosUI = CapacidadToDiametros;
        if (Materiales?.Any() == true) MaterialOptionsUI = Materiales.ToList();
        if (OptionsColorBote?.Any() == true) OptionsColorBoteUI = OptionsColorBote.ToList();
        if (OptionsColorCover?.Any() == true) OptionsColorCoverUI = OptionsColorCover.ToList();

        // Cargar seleccionados
        if (SelectedOption != null)
        {
            BoteConfig.Forma = SelectedOption.Forma?.ToUpperInvariant() ?? "ROUND";
            BoteConfig.Capacidad = SelectedOption.Capacidad ?? "150";
            BoteConfig.Diametro = SelectedOption.Diametro ?? "D45";
            BoteConfig.Material = SelectedOption.Material ?? "PET";
            BoteConfig.Color = SelectedOption.Color ?? "Clear";
        }

        if (SelectedOptionCap != null)
        {
            CapConfig.Forma = SelectedOptionCap.Forma?.ToUpperInvariant() ?? "SIMPLE";
            CapConfig.Diametro = SelectedOptionCap.Diametro ?? "D45";
            CapConfig.Color = SelectedOptionCap.Color ?? "Black";
            CapConfig.Sleeve = SelectedOptionCap.Sleeve;
        }

        NormalizeForma();
        RecomputeAllFilters();
    }

    // ===== API pública =====
    public async Task ShowModal()
    {
        IsVisible = true;
        await InvokeAsync(StateHasChanged);
        if (SetAccordionOpen.HasDelegate)
            await SetAccordionOpen.InvokeAsync(true);
    }

    public async Task HideModal()
    {
        IsVisible = false;
        await InvokeAsync(StateHasChanged);
        if (SetAccordionOpen.HasDelegate)
            await SetAccordionOpen.InvokeAsync(false);
        if (OnClose.HasDelegate)
            await OnClose.InvokeAsync();
    }

    // ===== Lógica interna =====
    private void ResetFilters()
    {
        BoteConfig = new BoteConfigModel();
        CapConfig = new CapConfigModel { Diametro = BoteConfig.Diametro };
        NormalizeForma();
        RecomputeAllFilters();
    }

    private void NormalizeForma()
    {
        // Bote
        string f = (BoteConfig.Forma ?? "").Trim().ToUpperInvariant();
        if (f is "REDONDO") f = "ROUND";
        if (f is "CUADRADO") f = "SQUARE";
        if (f is "CILINDRICO" or "CILÍNDRICO" or "CYL") f = "CYLINDRICAL";
        if (string.IsNullOrWhiteSpace(f)) f = "ROUND";
        BoteConfig.Forma = f;

        // Tapa
        string fc = (CapConfig.Forma ?? "").Trim().ToUpperInvariant();
        if (fc is "SIMPLE" or "BASIC") fc = "SIMPLE";
        if (fc is "METALICA" or "METÁLICA") fc = "METAL";
        if (fc is "CHILDPROOF" or "NINOS" or "NIÑOS") fc = "CHILDPROFF";
        if (string.IsNullOrWhiteSpace(fc)) fc = "SIMPLE";
        CapConfig.Forma = fc;
    }

    private string GetBoteHexColor()
    {
        var key = (BoteConfig.Color ?? "").Trim();
        if (key.StartsWith("#") && key.Length >= 4) return key;
        var c = OptionsColorBoteFiltered.FirstOrDefault(x =>
            string.Equals((x.Label ?? x.Value), key, StringComparison.OrdinalIgnoreCase))
            ?? OptionsColorBoteUI.FirstOrDefault(x =>
            string.Equals((x.Label ?? x.Value), key, StringComparison.OrdinalIgnoreCase));
        return c?.Hex ?? c?.ColorHex ?? "#CCCCCC";
    }

    private string GetCapHexColor()
    {
        var key = (CapConfig.Color ?? "").Trim();
        if (key.StartsWith("#") && key.Length >= 4) return key;
        var c = OptionsColorCoverFiltered.FirstOrDefault(x =>
            string.Equals((x.Label ?? x.Value), key, StringComparison.OrdinalIgnoreCase))
            ?? OptionsColorCoverUI.FirstOrDefault(x =>
            string.Equals((x.Label ?? x.Value), key, StringComparison.OrdinalIgnoreCase));
        return c?.Hex ?? c?.ColorHex ?? "#FFFFFF";
    }

    private string GetAlturaText() => (CurrentBoteDimension?.Altura ?? 88.3).ToString("0.0") + " mm";
    private string GetDiamBaseText() => (CurrentBoteDimension?.DiametroBase ?? 55.3).ToString("0.0") + " mm";
    private string GetDiamBocaText() => (CurrentBoteDimension?.DiametroBoca ?? 43.82).ToString("0.00") + " mm";

    private void OnCapacityChangedCore() { /* ya no se usa; dejamos stub para compatibilidad */ }

    // ===== Tipos =====
    public sealed class ColorOption
    {
        public int ID { get; set; }
        public string Value { get; set; } = "";     // etiqueta
        public string ColorHex { get; set; } = "";  // #RRGGBB

        public string Label { get => Value; set => Value = value; }
        public string Hex { get => ColorHex; set => ColorHex = value; }

        public ColorOption() { }
        public ColorOption(string label, string hex) { Value = label; ColorHex = hex; }
    }

    public sealed class BoteDataItem
    {
        public string? Forma { get; set; }
        public string? Capacidad { get; set; }
        public string? Diametro { get; set; }
        public string? Material { get; set; }
        public string? Color { get; set; }
    }

    public sealed class CapDataItem
    {
        public string? Forma { get; set; }
        public string? Diametro { get; set; }
        public string? Color { get; set; }
        public bool Sleeve { get; set; }
    }

    private sealed class BoteConfigModel
    {
        public string Forma { get; set; } = "ROUND";
        public string Capacidad { get; set; } = "150";
        public string Diametro { get; set; } = "D45";
        public string Material { get; set; } = "PET";
        public string Color { get; set; } = "Clear";
    }

    private sealed class CapConfigModel
    {
        public string Forma { get; set; } = "SIMPLE";
        public string Diametro { get; set; } = "D45";
        public string Color { get; set; } = "Black";
        public bool Sleeve { get; set; } = false;
    }

    private sealed record BoteDimension(double Altura, double DiametroBase, double DiametroBoca);

    // Mapa sencillo para mostrar dimensiones aproximadas por capacidad/diámetro
    private readonly Dictionary<string, Dictionary<string, BoteDimension>> DimensionsMap = new()
    {
        ["150"] = new() { ["D45"] = new(88.3, 55.3, 43.82) },
        ["200"] = new() { ["D45"] = new(105.86, 60.0, 43.82) },
        ["250"] = new() { ["D45"] = new(111.3, 63.91, 43.82) },
        ["300"] = new() { ["D45"] = new(125.5, 70.0, 43.82) },
        ["400"] = new() { ["D45"] = new(140.0, 75.0, 43.82) },
        ["500"] = new() { ["D45"] = new(155.0, 80.0, 43.82) }
    };
    private static List<ColorOption> MapNamesToColorOptions(
    IEnumerable<string> names,
    IEnumerable<ColorOption> catalog)
    {
        var cat = (catalog ?? Enumerable.Empty<ColorOption>()).ToList();
        var list = new List<ColorOption>();
        int id = 1;

        foreach (var name in names)
        {
            // Intenta emparejar por Label/Value en el catálogo recibido
            var found = cat.FirstOrDefault(c =>
                string.Equals((c.Label ?? c.Value), name, StringComparison.OrdinalIgnoreCase));

            // Si no existe en el catálogo, crea una entrada con HEX de respaldo
            list.Add(found ?? new ColorOption
            {
                ID = id++,
                Value = name,
                ColorHex = ColorToHexFallback(name)
            });
        }
        return list;
    }
    private async Task SaveAsync()
    {
        var bote = new BoteDataItem
        {
            Forma = BoteConfig.Forma,
            Capacidad = BoteConfig.Capacidad,
            Diametro = BoteConfig.Diametro,
            Material = BoteConfig.Material,
            Color = BoteConfig.Color
        };

        var cap = new CapDataItem
        {
            Forma = CapConfig.Forma,
            Diametro = CapConfig.Diametro,
            Color = CapConfig.Color,
            Sleeve = CapConfig.Sleeve
        };

        if (OnSaveData.HasDelegate)
            await OnSaveData.InvokeAsync((bote, cap));

        if (OnSave.HasDelegate)
            await OnSave.InvokeAsync();   // opcional: “se guardó” sin datos

        await HideModal();
    }


    private static string ColorToHexFallback(string name)
    {
        var n = (name ?? "").Trim().ToLowerInvariant();
        return n switch
        {
            "clear" => "#CCCCCC",
            "white" => "#FFFFFF",
            "black" => "#000000",
            "amber" => "#FFBF00",
            "red" => "#FF0000",
            "orange" => "#FFA500",
            "blue" or "light blue" => "#0D6EFD",
            "dark blue" => "#00008B",
            "green" or "light green" => "#90EE90",
            "emerald green" => "#50C878",
            "pale green" => "#98FB98",
            "turquoise" => "#40E0D0",
            "purple" or "violet" or "light purple" => "#800080",
            "gold" => "#D4AF37",
            "silver" => "#C0C0C0",
            _ => "#CCCCCC"
        };
    }

}
