@namespace NutrisBlazor.Components.Modals
@page "/components/modals/confirm"
@using System.Text.Json
@using NutrisBlazor.Components.Shared
@inject ILocalizationService Localization
@inject IJSRuntime JSRuntime
@inject IApiService Http
@inject ILogger<ConfirmModal> Logger

@if (IsModalVisible)
{
    <!-- Backdrop -->
    <div class="custom-modal-backdrop" @onclick="CancelModal"></div>

    <!-- Modal -->
    <div class="custom-modal-wrapper">
        <div class="custom-modal-container">
            <div class="modal-body">
                <div class="img-confirm">
                    <img class="width80" src="/img/icon-confirm.svg" alt="">
                </div>

                <div class="paragraph-confirm font-24">
                    <span>@Localization["modalConfirm.text"]</span>
                </div>

                <button class="btn-save-atr-confirm RalewayRegular font-20"
                        @onclick="CloseClient"
                        disabled="@isLoading">
                    @(isLoading ? "Procesando..." : @Localization["modalConfirm.Confirmandsign"])
                </button>

                <button class="btn-cancel-atr RalewayRegular font-20 close"
                        @onclick="CancelModal"
                        aria-label="Close">
                    @Localization["NavBar.Cancel"]
                </button>
            </div>
        </div>
    </div>
}

@code {
    // Parameters
    [Parameter] public string CodeRG35 { get; set; } = "";
    [Parameter] public string Status { get; set; } = "Desarrollo";
    [Parameter] public string RG37 { get; set; } = "";
    [Parameter] public bool IsModalVisible { get; set; }
    [Parameter] public string PalletComments { get; set; } = "";

    // Event Callbacks
    [Parameter] public EventCallback<bool> IsModalVisibleChanged { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }

    // State variables
    private bool isLoading = false;
    private bool isProcessing = false;

    protected override void OnInitialized()
    {
        Logger.LogInformation($"ConfirmModal initialized with CodeRG35: {CodeRG35}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsModalVisible)
        {
            // Prevenir scroll del body cuando el modal está abierto
            await JSRuntime.InvokeVoidAsync("eval", "document.body.style.overflow = 'hidden';");
        }
        else
        {
            // Restaurar scroll cuando se cierra
            await JSRuntime.InvokeVoidAsync("eval", "document.body.style.overflow = '';");
        }
    }

    private async Task CloseClient()
    {
        if (isProcessing) return;

        isProcessing = true;
        isLoading = true;
        StateHasChanged();

        try
        {
            var data = new
            {
                Status = "Cerrado cliente"
                // Pallet_comments = PalletComments
            };

            Logger.LogInformation($"Updating status for {CodeRG35} to 'Cerrado cliente'");

            var response = await Http.PatchAsync(
                $"CustomizeRG35('{CodeRG35}')?$expand=Formulation,Recipe,Analytics,Files&tenant=nutris",
                data
            );

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Logger.LogInformation($"Data updated successfully: {responseContent}");

                // Cerrar modal
                await CloseModal();

                // Notificar al componente padre
                await OnConfirm.InvokeAsync();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"API error response: {errorContent}");
                await ShowErrorAlert("Error al actualizar el estado. Por favor, intente de nuevo.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error updating data for {CodeRG35}");
            await ShowErrorAlert("Ocurrió un error. Por favor, intente de nuevo.");
        }
        finally
        {
            isLoading = false;
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task CancelModal()
    {
        if (isProcessing) return;

        Logger.LogInformation("Modal cancelled by user");
        await CloseModal();
    }

    private async Task CloseModal()
    {
        IsModalVisible = false;
        await IsModalVisibleChanged.InvokeAsync(false);

        // Restaurar scroll del body
        await JSRuntime.InvokeVoidAsync("eval", "document.body.style.overflow = '';");

        StateHasChanged();
    }

    private async Task ShowErrorAlert(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
}

<style>
    /* Backdrop personalizado */
    .custom-modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(222, 230, 243, 0.55);
        backdrop-filter: blur(2px);
        z-index: 1040;
        animation: fadeIn 0.3s ease;
    }

    /* Wrapper para centrar el modal */
    .custom-modal-wrapper {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1050;
        pointer-events: none;
    }

    /* Contenedor del modal */
    .custom-modal-container {
        position: relative;
        width: 100%;
        max-width: 689px;
        background-color: white;
        background-color: var(--sectionSuperior, white);
        padding: 4.3rem 2rem;
        margin: 0 1rem;
        border-radius: 15px;
        box-shadow: 1px 3px 20px -2px rgba(0, 0, 0, 0.13);
        pointer-events: all;
        animation: slideIn 0.3s ease;
    }

    .modal-body {
        padding: 0;
    }

    .img-confirm {
        text-align: center;
        margin-bottom: 2rem;
    }

        .img-confirm img {
            display: block;
            margin: 0 auto;
        }

    .width80 {
        width: 80px;
        height: auto;
    }

    .paragraph-confirm {
        margin: 2.82rem 0;
        text-align: center;
        color: #000;
        padding: 0 2rem;
        line-height: 1.6;
    }

    .font-24 {
        font-size: 24px;
    }

    .font-20 {
        font-size: 20px;
    }

    .btn-cancel-atr {
        display: block;
        background-color: transparent;
        color: var(--textButton, #2F5496);
        margin: 1rem auto;
        cursor: pointer;
        transition: all 0.3s ease;
        padding: 1rem 1.57rem;
        border-radius: 30px;
        border: none;
        outline: none;
    }

        .btn-cancel-atr:hover {
            background: white;
            border: 1px solid var(--textButton, #2F5496);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

    .btn-save-atr-confirm {
        display: block;
        border: solid 1px var(--textButton, #2F5496);
        border-radius: 30px;
        background-color: var(--textButton, #2F5496);
        line-height: 1rem;
        padding: 1.44rem 1.57rem;
        color: #fff;
        margin: 3rem auto 0;
        cursor: pointer;
        transition: all 0.3s ease;
        outline: none;
    }

        .btn-save-atr-confirm:hover:not(:disabled) {
            color: var(--textButton, #2F5496);
            background: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .btn-save-atr-confirm:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    /* Animaciones */
    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    @@keyframes slideIn {
        from

    {
        transform: translateY(-20px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    /* Responsive */
    @@media (max-width: 768px) {
        .custom-modal-container

    {
        max-width: 90%;
        padding: 3rem 1.5rem;
    }

    .paragraph-confirm {
        font-size: 18px;
        padding: 0 1rem;
        margin: 2rem 0;
    }

    .font-24 {
        font-size: 20px;
    }

    .font-20 {
        font-size: 18px;
    }

    .btn-save-atr-confirm,
    .btn-cancel-atr {
        padding: 0.8rem 1.2rem;
    }

    .btn-save-atr-confirm {
        margin: 2rem auto 0;
    }

    }

    @@media (max-width: 480px) {
        .custom-modal-container

    {
        max-width: 95%;
        margin: 0 0.5rem;
        padding: 2rem 1rem;
    }

    .paragraph-confirm {
        font-size: 16px;
    }

    .font-24 {
        font-size: 18px;
    }

    .font-20 {
        font-size: 16px;
    }

    .btn-save-atr-confirm,
    .btn-cancel-atr {
        padding: 0.7rem 1rem;
    }

    .width80 {
        width: 60px;
    }

    }

    .RalewayRegular {
        font-family: 'RalewayRegular', sans-serif;
    }
</style>