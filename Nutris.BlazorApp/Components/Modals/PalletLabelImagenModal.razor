@namespace NutrisBlazor.Components.Modals
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using System.Text.Json
@using NutrisBlazor.Components.Shared
@using NutrisBlazor.Services
<link href="css/PalletLabelImagen.css" rel="stylesheet" />
@if (IsLoading)
{
    <Loading LoadingText="@GetTranslation("Message.Loading", "Loading...")" />
}
else
{

    <div class="modal fade"
         id="PalletLabelImagen"
         tabindex="-1"
         aria-labelledby="PalletLabelImagenlabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content upload-modal-container">
                <button type="button"
                        class="btn-close-custom"
                        @onclick="CloseModal">
                    <span>&times;</span>
                </button>

                <div class="modal-body">
                    <h2 class="modal-title">¿Quieres cargar tu propia etiqueta de pallet?</h2>

                    <div class="upload-content">
                        <InputFile @ref="fileInput"
                                   id="fileInputPallet"
                                   class="d-none"
                                   OnChange="@HandleFileUpload"
                                   accept="image/*" />

                        <label for="fileInputPallet" class="upload-area">
                            @if (string.IsNullOrEmpty(PreviewImage))
                            {
                                <svg width="40" height="40" viewBox="0 0 24 24" fill="none" class="mb-2">
                                    <path d="M12 2L12 14M12 14L17 9M12 14L7 9" stroke="#4B7BCD" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M2 17L2 19C2 20.1046 2.89543 21 4 21L20 21C21.1046 21 22 20.1046 22 19L22 17" stroke="#4B7BCD" stroke-width="2" stroke-linecap="round" />
                                </svg>
                                <p class="upload-text">Subir un documento con la etiqueta</p>
                            }
                            else
                            {
                                <div class="preview-box">
                                    <img src="@PreviewImage" alt="Preview" class="preview-image">
                                    <button type="button" class="btn-delete" @onclick="RemoveImage" @onclick:stopPropagation="true">
                                        &times;
                                    </button>
                                </div>
                            }
                        </label>

                        <p class="format-info">Formato de archivo aceptado: jpg, png, SVG</p>

                        <button type="button"
                                class="btn-submit"
                                @onclick="UploadImage"
                                disabled="@(string.IsNullOrEmpty(PreviewImage) || IsLoading)">
                            @if (IsLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Subir
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string CodeRG35 { get; set; } = "";
    [Parameter] public string TypeImage { get; set; } = "";
    [Parameter] public string ImageBoxLabel { get; set; } = "";
    [Parameter] public EventCallback<dynamic> OnUpdated { get; set; }
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback OnClose { get; set; }

    [Inject] private IApiService ApiService { get; set; } = default!;
    [Inject] private ILocalizationService Localization { get; set; } = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;
    [Inject] private ILogger<PalletLabelImagenModal> Logger { get; set; } = default!;

    private bool IsLoading = false;
    private string? PreviewImage = null;
    private string? Base64Data = null;
    private InputFile? fileInput;
    private IBrowserFile? selectedFile;
    private string GetTranslation(string key, string defaultValue)
    {
        var translation = Localization[key];
        return string.IsNullOrEmpty(translation) || translation == key ? defaultValue : translation;
    }
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;

            if (selectedFile != null && selectedFile.ContentType.StartsWith("image/"))
            {
                // Convertir a base64
                using var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB max
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var bytes = ms.ToArray();

                Base64Data = Convert.ToBase64String(bytes);
                PreviewImage = $"data:{selectedFile.ContentType};base64,{Base64Data}";

                StateHasChanged();
            }
            else
            {
                PreviewImage = null;
                Base64Data = null;
                await JS.InvokeVoidAsync("alert", Localization["Please select a valid image file"]);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling file upload");
            await JS.InvokeVoidAsync("alert", Localization["errors.FileUploadError"]);
        }
    }

    private async Task UploadImage()
    {
        if (string.IsNullOrEmpty(Base64Data))
        {
            await JS.InvokeVoidAsync("alert", Localization["Please select an image first"]);
            return;
        }

        try
        {
            IsLoading = true;
            StateHasChanged();

            var data = new
            {
                numeroRG = CodeRG35,
                tipoImagen = "Pallet_label_imagen",
                imagenBase64 = Base64Data
            };

            var jsonData = JsonSerializer.Serialize(data);
            var response = await ApiService.PostAsync("modificarImagen(1)/Microsoft.NAV.modificarCab?$tenant=nutris", data);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("Image uploaded successfully");


                // Notificar al componente padre con los datos actualizados
                var updatedResponse = new
                {
                    Pallet_label_imagen = Base64Data
                };

                await OnUpdated.InvokeAsync(updatedResponse);
                await JS.InvokeVoidAsync("eval", @"var modal = bootstrap.Modal.getInstance(document.getElementById('PalletLabelImagen'));if (modal){modal.hide();}");

                // Limpiar después de un pequeño delay
                await Task.Delay(300);
                await CloseModal();
            }
            else
            {
                Logger.LogError($"Error uploading image: {response.StatusCode}");
                await JS.InvokeVoidAsync("alert", Localization["errors.UploadFailed"]);
                await JS.InvokeVoidAsync("eval", @"var modal = bootstrap.Modal.getInstance(document.getElementById('PalletLabelImagen'));if (modal){modal.hide();}");


            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error uploading image");
            await JS.InvokeVoidAsync("alert", Localization["errors.GenericError"]);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    private void RemoveImage()
    {
        PreviewImage = null;
        Base64Data = null;
        selectedFile = null;
        StateHasChanged();
    }
    private async Task CloseModal()
    {
        // Limpiar el estado
        PreviewImage = null;
        Base64Data = null;
        selectedFile = null;

        // Limpiar cualquier backdrop residual
        await JS.InvokeVoidAsync("eval", @"
            // Cerrar modal de Bootstrap
            var modal = bootstrap.Modal.getInstance(document.getElementById('PalletLabelImagen'));
            if (modal) {
                modal.hide();
            }

            // Limpiar backdrop manualmente después de un delay
            setTimeout(() => {
                document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
                document.body.classList.remove('modal-open');
                document.body.style.removeProperty('overflow');
                document.body.style.removeProperty('padding-right');
            }, 300);
        ");

        await OnClose.InvokeAsync();
        StateHasChanged();
    }

    public void Show()
    {
        IsLoading = false;
        PreviewImage = null;
        Base64Data = null;
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Limpiar cualquier modal o backdrop residual al cargar la página
            await JS.InvokeVoidAsync("eval", @"
                // Cerrar cualquier modal abierto
                document.querySelectorAll('.modal.show').forEach(modal => {
                    modal.classList.remove('show');
                    modal.style.display = 'none';
                });

                // Remover todos los backdrops
                document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());

                // Limpiar clases del body
                document.body.classList.remove('modal-open');
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
            ");
        }
    }
}