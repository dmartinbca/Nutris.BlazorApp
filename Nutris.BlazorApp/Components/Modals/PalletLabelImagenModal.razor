@namespace NutrisBlazor.Components.Modals
@page "/components/modals/palletlabelimagen"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using NutrisBlazor.Components.Shared
@inject ILocalizationService Localization
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject ILogger<PalletLabelImagenModal> Logger

<Loading IsVisible="@isLoading" />

@if (!isLoading)
{
    <div class="modal fade @(IsVisible ? "show d-block" : "")" 
         id="PalletLabelImagen" 
         tabindex="-1" 
         aria-labelledby="PalletLabelImagenlabel" 
         aria-hidden="@(!IsVisible)"
         style="@(IsVisible ? "display: block; background-color: rgba(0,0,0,0.5);" : "display: none;")">
        <div class="upload-modal-container modal-dialog modal-content">
            <div class="modal-body">
                <div>
                    <button class="oculto-derecha" 
                            @onclick="CloseModal">
                        x
                    </button>
                </div>
                
                <div class="title-upload">
                    <h2 class="font-24 MuseoSemiBold">
                        @Localization["Wouldyoulike"]
                    </h2>
                </div>
                
                <div class="upload-content-btn">
                    <!-- Input de archivo y área de drop -->
                    <InputFile id="fileInputPallet"
                               class="visually-hidden"
                               accept="image/*"
                               OnChange="HandleFileUpload" />
                    
                    <!-- Área de preview y upload -->
                    <label for="fileInputPallet" class="upload-content-btn2">
                        @if (string.IsNullOrEmpty(previewImage))
                        {
                            <div class="img-btn-upload">
                                <img src="/iconbuttons/upload-icon.svg" alt="Upload icon">
                            </div>
                            <div class="paragraph-upload">
                                <p class="font-10 RalewayLight">
                                    @Localization["Uploadadocument"]
                                </p>
                            </div>
                        }
                        else
                        {
                            <div class="preview-container w-100 h-100 overflow-hidden">
                                <img src="@previewImage" 
                                     alt="Preview" 
                                     class="preview-image w-100 h-100 object-fit-contain">
                            </div>
                        }
                    </label>
                    
                    <div class="text-center">
                        @Localization["Acceptedfileformat"]
                    </div>
                    
                    <button class="btn-save-atr-upload font-20 RalewayRegular"
                            @onclick="UploadPalletLabelImage"
                            disabled="@(string.IsNullOrEmpty(previewImage) || isLoading)">
                        @if (isLoading)
                        {
                            <Loading />
                        }
                        else
                        {
                            <span>@Localization["Upload"]</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Parameters
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string CodeRG35 { get; set; } = "";
    [Parameter] public string TypeImage { get; set; } = "";
    [Parameter] public string ImageBoxLabel { get; set; } = "";
    [Parameter] public EventCallback<PalletLabelResponse> OnPalletLabelUpdated { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    // State variables
    private bool isLoading = false;
    private string? previewImage = null;
    private string? base64Data = null;
    private long maxFileSize = 10 * 1024 * 1024; // 10MB max file size

    protected override void OnInitialized()
    {
        // Initialize with existing image if provided
        if (!string.IsNullOrEmpty(ImageBoxLabel))
        {
            previewImage = ImageBoxLabel;
            // If ImageBoxLabel is already a data URL or base64, extract the base64 part
            if (ImageBoxLabel.Contains(","))
            {
                base64Data = ImageBoxLabel.Split(',')[1];
            }
            else
            {
                base64Data = ImageBoxLabel;
            }
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            
            // Validate file type
            if (!file.ContentType.StartsWith("image/"))
            {
                await ShowAlert(Localization["Please select a valid image file"]);
                return;
            }

            // Validate file size
            if (file.Size > maxFileSize)
            {
                await ShowAlert($"File size must be less than {maxFileSize / (1024 * 1024)}MB");
                return;
            }

            // Read file and convert to base64
            using var stream = file.OpenReadStream(maxFileSize);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var bytes = memoryStream.ToArray();
            
            // Create base64 string
            base64Data = Convert.ToBase64String(bytes);
            previewImage = $"data:{file.ContentType};base64,{base64Data}";
            
            Logger.LogInformation("File uploaded successfully: {FileName}, Size: {FileSize}", 
                file.Name, file.Size);
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error uploading file");
            await ShowAlert("Error uploading file. Please try again.");
            previewImage = null;
            base64Data = null;
            StateHasChanged();
        }
    }

    private async Task UploadPalletLabelImage()
    {
        if (string.IsNullOrEmpty(base64Data))
        {
            await ShowAlert("Please select an image first");
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            var data = new
            {
                numeroRG = CodeRG35,
                tipoImagen = "Pallet_label_imagen",
                imagenBase64 = base64Data
            };

            Logger.LogInformation("Uploading pallet label image for {CodeRG35}", CodeRG35);

            var response = await Http.PostAsJsonAsync(
                "api/modificarImagen(1)/Microsoft.NAV.modificarCab", 
                data
            );

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("Pallet label image updated successfully");

                // Parse response
                var updatedResponse = JsonSerializer.Deserialize<PalletLabelResponse>(
                    responseContent, 
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                );
                
                if (updatedResponse != null)
                {
                    // Add the base64 data to the response
                    updatedResponse.PalletLabelImagen = base64Data;
                    
                    // Emit event to parent component
                    await OnPalletLabelUpdated.InvokeAsync(updatedResponse);
                    
                    Logger.LogInformation("Event emitted to parent component");
                }

                // Close modal
                await CloseModal();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError("API error response: {Error}", errorContent);
                await ShowAlert("Error updating pallet label image. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating pallet label image");
            await ShowAlert("An error occurred. Please try again.");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CloseModal()
    {
        // Reset state
        previewImage = null;
        base64Data = null;
        
        // Notify parent component
        await OnClose.InvokeAsync();
        
        // Hide Bootstrap modal if needed
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                const modal = document.getElementById('PalletLabelImagen');
                if (modal) {
                    const bootstrapModal = bootstrap.Modal.getInstance(modal);
                    if (bootstrapModal) {
                        bootstrapModal.hide();
                    }
                    // Remove backdrop if exists
                    const backdrop = document.querySelector('.modal-backdrop');
                    if (backdrop) {
                        backdrop.remove();
                    }
                }
            ");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Could not hide Bootstrap modal");
        }
    }

    private async Task ShowAlert(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }

    // Response model
    public class PalletLabelResponse
    {
        public string? PalletLabelImagen { get; set; }
        public string? Status { get; set; }
        public string? Message { get; set; }
        // Add other properties as needed based on your API response
    }
}

<style>

    .oculto-derecha {
        position: absolute;
        right: 10px;
        top: -50px;
        cursor: pointer;
        background: transparent;
        border: 0;
        font-size: 1.5rem;
        z-index: 1;
    }

    .upload-modal-container {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        width: 100%;
        max-width: 689px;
        height: 460px;
        background-color: var(--sectionSuperior);
        padding: 4.3rem 0;
        margin: auto;
        border-radius: 15px;
        box-shadow: 1px 3px 20px -2px #00000021;
        overflow: hidden;
        border: none;
    }

    .paragraph-upload {
        margin: 0.945rem 0;
        text-align: center;
        line-height: 0.3rem;
        font-size: 0.8em;
        color: var(--textButton);
    }

    .title-upload {
        text-align: center;
        padding: 0 2rem;
    }

    .title-upload h2 {
        text-align: center;
        font-weight: 700;
        color: #000;
        font-size: 1.51em;
    }

    .btn-cancel-atr {
        display: block;
        background-color: transparent;
        color: var(--textButton);
        border: none;
        font-size: 1.44em;
        margin: 1.19rem auto;
        cursor: pointer;
    }

    .btn-save-atr-upload {
        display: block;
        border: solid 1px var(--textButton);
        border-radius: 30px;
        background-color: var(--textButton);
        line-height: 1rem;
        font-size: 1.44em;
        padding: 1.44rem 1.57rem;
        color: #fff;
        margin: 1rem auto 0;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-save-atr-upload:hover:not(:disabled) {
        color: var(--textButton);
        background: white;
        transition: all 0.3s ease;
    }

    .btn-save-atr-upload:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .upload-content-btn {
        width: 395px;
        height: 170px;
        margin: 40px auto 0;
        border: dotted 1px var(--textNotFeatured);
        padding: 10px;
    }

    .upload-content-btn2 {
        width: 395px;
        height: 200px;
        margin: auto;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        position: relative;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .upload-content-btn2:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }

    .cambiar {
        position: absolute;
        top: 0;
        right: 15px;
        z-index: 10;
        background: white;
        padding: 10px;
        border-radius: 5px;
    }

    .upload-content-btn img {
        display: block;
        cursor: pointer;
    }

    .img-btn-upload {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 10px;
    }

    .preview-container {
        padding: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .preview-image {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    .visually-hidden {
        position: absolute !important;
        width: 1px !important;
        height: 1px !important;
        padding: 0 !important;
        margin: -1px !important;
        overflow: hidden !important;
        clip: rect(0,0,0,0) !important;
        white-space: nowrap !important;
        border: 0 !important;
    }

    .text-center {
        text-align: center;
        margin: 10px 0;
        color: #666;
        font-size: 0.9em;
    }

    /* Modal backdrop effect when visible */
    .modal.show {
        background-color: rgba(0, 0, 0, 0.5);
    }

    /* Ensure proper z-index for modal */
    .modal {
        z-index: 1050;
    }

    .modal-dialog {
        z-index: 1055;
    }

    /* Font classes */
    .font-10 {
        font-size: 10px;
    }

    .font-20 {
        font-size: 20px;
    }

    .font-24 {
        font-size: 24px;
    }

    .RalewayLight {
        font-family: 'RalewayLight', sans-serif;
    }

    .RalewayRegular {
        font-family: 'RalewayRegular', sans-serif;
    }

    .MuseoSemiBold {
        font-family: 'MuseoSemiBold', sans-serif;
    }

    /* Responsive styles */
    @@media (max-width: 768px) {
        .upload-modal-container {
            max-width: 90%;
            height: auto;
            min-height: 400px;
            padding: 2rem 1rem;
        }

        .upload-content-btn,
        .upload-content-btn2 {
            width: 100%;
            max-width: 350px;
        }

        .btn-save-atr-upload {
            padding: 1rem 1.5rem;
            font-size: 1.2em;
        }

        .title-upload h2 {
            font-size: 1.3em;
        }
    }

    @@media (max-width: 480px) {
        .upload-modal-container {
            max-width: 95%;
            padding: 1.5rem 0.5rem;
        }

        .upload-content-btn,
        .upload-content-btn2 {
            width: 100%;
            max-width: 280px;
            height: 150px;
        }

        .title-upload h2 {
            font-size: 1.2em;
        }

        .btn-save-atr-upload {
            padding: 0.8rem 1.2rem;
            font-size: 1em;
        }

        .oculto-derecha {
            right: 5px;
            top: -40px;
        }
    }

    /* Bootstrap utility classes */
    .w-100 {
        width: 100%;
    }

    .h-100 {
        height: 100%;
    }

    .overflow-hidden {
        overflow: hidden;
    }

    .object-fit-contain {
        object-fit: contain;
    }

    .d-block {
        display: block;
    }

    .show {
        opacity: 1;
    }

    .fade {
        opacity: 0;
        transition: opacity 0.3s linear;
    }

    .fade.show {
        opacity: 1;
    }
</style>