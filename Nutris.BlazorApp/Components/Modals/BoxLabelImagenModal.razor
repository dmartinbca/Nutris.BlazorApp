@namespace NutrisBlazor.Components.Modals
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using System.Text.Json
@using NutrisBlazor.Components.Shared
@using NutrisBlazor.Services

<link href="css/BoxLabelImagen.css" rel="stylesheet" />

@if (IsLoading)
{
    <Loading LoadingText="@GetTranslation("Message.Loading", "Loading...")" />
}

<div class="modal fade"
     id="BoxLabelImagen"
     tabindex="-1"
     aria-labelledby="BoxLabelImagenlabel"
     aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content upload-modal-container">
            <div class="modal-body">
                <h2 class="modal-title">@Localization["Wouldyoulike"]</h2>

                <div class="upload-content">
                    <InputFile @ref="fileInput"
                               id="fileInputBox"
                               class="d-none"
                               OnChange="@HandleFileUpload"
                               accept="image/*" />

                    <label for="fileInputBox" class="upload-area">
                        @if (string.IsNullOrEmpty(PreviewImage))
                        {
                            <svg width="40" height="40" viewBox="0 0 24 24" fill="none" class="mb-2">
                                <path d="M12 2L12 14M12 14L17 9M12 14L7 9" stroke="#4B7BCD" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                <path d="M2 17L2 19C2 20.1046 2.89543 21 4 21L20 21C21.1046 21 22 20.1046 22 19L22 17" stroke="#4B7BCD" stroke-width="2" stroke-linecap="round" />
                            </svg>
                            <p class="upload-text">@Localization["Uploadadocument"]</p>
                        }
                        else
                        {
                            <div class="preview-box">
                                <img src="@PreviewImage" alt="Preview" class="preview-image">
                                <button type="button" class="btn-delete" @onclick="RemoveImage" @onclick:stopPropagation="true">
                                    &times;
                                </button>
                            </div>
                        }
                    </label>

                    <p class="format-info">@Localization["Acceptedfileformat"]</p>

                    <button type="button"
                            class="btn-submit"
                            @onclick="UploadImage"
                            disabled="@(string.IsNullOrEmpty(PreviewImage) || IsLoading)">
                        @if (IsLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        @Localization["Upload"]
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string CodeRG35 { get; set; } = "";
    [Parameter] public EventCallback<dynamic> OnUpdated { get; set; }

    [Inject] private IApiService ApiService { get; set; } = default!;
    [Inject] private ILocalizationService Localization { get; set; } = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;
    [Inject] private ILogger<BoxLabelImagenModal> Logger { get; set; } = default!;

    private bool IsLoading = false;
    private string? PreviewImage = null;
    private string? Base64Data = null;
    private InputFile? fileInput;
    private IBrowserFile? selectedFile;

    private string GetTranslation(string key, string defaultValue)
    {
        var translation = Localization[key];
        return string.IsNullOrEmpty(translation) || translation == key ? defaultValue : translation;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Limpiar cualquier modal residual
            await JS.InvokeVoidAsync("eval", @"
                document.querySelectorAll('.modal.show').forEach(modal => {
                    modal.classList.remove('show');
                    modal.style.display = 'none';
                });
                document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
                document.body.classList.remove('modal-open');
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
            ");
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;

            if (selectedFile != null && selectedFile.ContentType.StartsWith("image/"))
            {
                using var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var bytes = ms.ToArray();

                Base64Data = Convert.ToBase64String(bytes);
                PreviewImage = $"data:{selectedFile.ContentType};base64,{Base64Data}";

                StateHasChanged();
            }
            else
            {
                PreviewImage = null;
                Base64Data = null;
                await JS.InvokeVoidAsync("alert", Localization["Please select a valid image file"]);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling file upload");
            await JS.InvokeVoidAsync("alert", Localization["errors.FileUploadError"]);
        }
    }

    private async Task UploadImage()
    {
        if (string.IsNullOrEmpty(Base64Data))
        {
            await JS.InvokeVoidAsync("alert", Localization["Please select an image first"]);
            return;
        }

        try
        {
            IsLoading = true;
            StateHasChanged();

          
            var data = new
            {
                numeroRG = CodeRG35,
                tipoImagen = "Box_label_imagen",
                imagenBase64 = Base64Data
            };

            var response = await ApiService.PostAsync2("modificarImagen(1)/Microsoft.NAV.modificarCab?tenant=nutris", data);

            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Box label image uploaded successfully");

                var updatedResponse = new
                {
                    Box_label_imagen = Base64Data
                };

                await OnUpdated.InvokeAsync(updatedResponse);

                await JS.InvokeVoidAsync("eval", @"
                    var modal = bootstrap.Modal.getInstance(document.getElementById('BoxLabelImagen'));
                    if (modal) { modal.hide(); }
                ");

                await Task.Delay(300);
                await CloseModal();
            }
            else
            {
                Logger.LogError($"Error uploading image: {response.StatusCode}");
                await JS.InvokeVoidAsync("alert", Localization["errors.UploadFailed"]);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error uploading box label image");
            await JS.InvokeVoidAsync("alert", Localization["errors.GenericError"]);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void RemoveImage()
    {
        PreviewImage = null;
        Base64Data = null;
        selectedFile = null;
        StateHasChanged();
    }

    private async Task CloseModal()
    {
        PreviewImage = null;
        Base64Data = null;
        selectedFile = null;

        await JS.InvokeVoidAsync("eval", @"
            var modal = bootstrap.Modal.getInstance(document.getElementById('BoxLabelImagen'));
            if (modal) { modal.hide(); }
            setTimeout(() => {
                document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
                document.body.classList.remove('modal-open');
                document.body.style.removeProperty('overflow');
                document.body.style.removeProperty('padding-right');
            }, 300);
        ");

        StateHasChanged();
    }
}