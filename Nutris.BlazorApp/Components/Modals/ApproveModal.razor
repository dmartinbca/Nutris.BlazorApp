@namespace NutrisBlazor.Components.Modals
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop

@if (IsLoading)
{
    <div class="loading-container">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="modal fade @(IsVisible ? "show d-block" : "")"
         id="approveModal"
         tabindex="-1"
         aria-labelledby="approveModalLabel"
         aria-hidden="@(!IsVisible)"
         style="@(IsVisible ? "display: block; background-color: rgba(0,0,0,0.5);" : "display: none;")">
        <div class="approve-modal-container modal-dialog modal-content">
            <div class="modal-body">
                <div class="title-approve">
                    <h2>@Localization["ApproveModal.Wouldyouliketoconfirmtheformula"]</h2>
                </div>
                <div class="paragraph-approve">
                    <p>@Localization["ApproveModal.Weneedyourconfirmation"]</p>
                    <p>@Localization["ApproveModal.rememberthatonceconfirmed"]</p>
                    <p>@Localization["ApproveModal.makefurtheradjustments"]</p>
                    <p>@Localization["ApproveModal.finalizingtheproduct"]</p>
                </div>

                <button class="btn-save-atr-approve" @onclick="AcceptFormulation">
                    @Localization["ApproveModal.Aproveandconinuewiththedesign"]
                </button>
                <button class="btn-cancel-atr close" @onclick="CloseModal">
                    @Localization["NavBar.Cancel"]
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string CodeRG35 { get; set; } = "";
    [Parameter] public bool CustomerAccepted { get; set; } = false;
    [Parameter] public bool TomarMuestra { get; set; } = false;
    [Parameter] public string RG37 { get; set; } = "";
    [Parameter] public EventCallback OnFormulationApproved { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    [Inject] private IApiService ApiService { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private ILocalizationService Localization { get; set; } = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;
    [Inject] private ILogger<ApproveModal> Logger { get; set; } = default!;

    private bool IsLoading = false;

    private async Task AcceptFormulation()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            var dataForFormulation = new
            {
                Customer_accepted = true,
                Status = "Cerrado cliente"
            };

            Logger.LogInformation($"Accepting formulation for RG37: {RG37}");

            // Llamada a la API para actualizar la formulación
            var response = await ApiService.PatchAsync($"CustomizeRG37('{RG37}')", dataForFormulation);

            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Formulation accepted successfully");

                // Notificar al componente padre
                await OnFormulationApproved.InvokeAsync();

                // Cerrar el modal
                await CloseModal();
            }
            else
            {
                Logger.LogError($"Error in API response: {response.StatusCode}");
                await JS.InvokeVoidAsync("alert", Localization["errors.ApprovalFailed"]);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error approving formulation");
            await JS.InvokeVoidAsync("alert", Localization["errors.GenericError"]);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();

        // Hide Bootstrap modal if needed
        await JS.InvokeVoidAsync("hideBootstrapModal", "approveModal");
    }

    // Public method to show the modal programmatically
    public async Task ShowModal()
    {
        IsLoading = false;
        StateHasChanged();
    }
}