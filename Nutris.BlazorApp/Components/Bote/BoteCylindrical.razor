@namespace NutrisBlazor.Components.Bote
@using Microsoft.AspNetCore.Components

<div class="bote-container" style="width: 190px;">
    <svg viewBox="0 0 190 350"
         xmlns="http://www.w3.org/2000/svg"
         class="bote-cylindrical"
         style="width: 100%; height: auto;">

        <!-- Bottle body (cylindrical shape) -->
        <defs>
            <!-- Gradient for glass effect -->
            <linearGradient id="@gradientId" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" style="stop-color:@GetDarkerColor();stop-opacity:1" />
                <stop offset="50%" style="stop-color:@ColorBote;stop-opacity:1" />
                <stop offset="100%" style="stop-color:@GetDarkerColor();stop-opacity:1" />
            </linearGradient>

            <!-- Highlight gradient -->
            <linearGradient id="@highlightId" x1="0%" y1="0%" x2="0%" y2="100%">
                <stop offset="0%" style="stop-color:white;stop-opacity:0.3" />
                <stop offset="100%" style="stop-color:white;stop-opacity:0" />
            </linearGradient>
        </defs>

        <!-- Main cylinder body -->
        <ellipse cx="95" cy="320" rx="45" ry="8" fill="@GetDarkerColor()" opacity="0.3" />
        <rect x="50" y="80" width="90" height="240" fill="url(#@gradientId)" rx="2" ry="2" />

        <!-- Neck -->
        <rect x="75" y="60" width="40" height="25" fill="url(#@gradientId)" />

        <!-- Bottle opening -->
        <rect x="82" y="50" width="26" height="15" fill="@GetDarkerColor()" />
        <ellipse cx="95" cy="50" rx="13" ry="3" fill="@GetDarkerColor()" />

        <!-- Highlight for glass effect -->
        <rect x="60" y="90" width="25" height="180" fill="url(#@highlightId)" rx="2" ry="2" opacity="0.5" />

        <!-- Bottom ellipse -->
        <ellipse cx="95" cy="320" rx="45" ry="8" fill="@ColorBote" />

        <!-- Label area (optional) -->
        @if (ShowLabel)
        {
            <rect x="55" y="140" width="80" height="100"
                  fill="white"
                  opacity="0.9"
                  rx="2" ry="2" />
        }
    </svg>
</div>

@code {
    [Parameter] public string ColorBote { get; set; } = "#E0E0E0";
    [Parameter] public bool ShowLabel { get; set; } = false;

    private string gradientId = $"gradient-{Guid.NewGuid():N}";
    private string highlightId = $"highlight-{Guid.NewGuid():N}";

    protected override void OnInitialized()
    {
        // Ensure we have a valid color
        if (string.IsNullOrWhiteSpace(ColorBote))
        {
            ColorBote = "#E0E0E0"; // Default gray color
        }
    }

    private string GetDarkerColor()
    {
        try
        {
            // Parse the hex color and make it darker
            var color = ColorBote.TrimStart('#');
            if (color.Length == 6)
            {
                var r = Convert.ToInt32(color.Substring(0, 2), 16);
                var g = Convert.ToInt32(color.Substring(2, 2), 16);
                var b = Convert.ToInt32(color.Substring(4, 2), 16);

                // Make color darker by reducing each component by 30%
                r = Math.Max(0, (int)(r * 0.7));
                g = Math.Max(0, (int)(g * 0.7));
                b = Math.Max(0, (int)(b * 0.7));

                return $"#{r:X2}{g:X2}{b:X2}";
            }
        }
        catch
        {
            // If parsing fails, return a default darker gray
        }

        return "#999999";
    }
}

<style>
    .bote-container {
        display: inline-block;
        position: relative;
    }

    .bote-cylindrical {
        filter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.1));
    }
</style>
