@namespace NutrisBlazor.Components.Bote
@using Microsoft.AspNetCore.Components

<div class="bote-container" style="width: 190px;">
    <svg viewBox="0 0 190 350"
         xmlns="http://www.w3.org/2000/svg"
         class="bote-square"
         style="width: 100%; height: auto;">

        <!-- Bottle body (square shape) -->
        <defs>
            <!-- Gradient for 3D effect on front face -->
            <linearGradient id="@frontGradientId" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" style="stop-color:@GetDarkerColor();stop-opacity:1" />
                <stop offset="30%" style="stop-color:@ColorBote;stop-opacity:1" />
                <stop offset="70%" style="stop-color:@ColorBote;stop-opacity:1" />
                <stop offset="100%" style="stop-color:@GetDarkerColor();stop-opacity:1" />
            </linearGradient>

            <!-- Gradient for top face -->
            <linearGradient id="@topGradientId" x1="0%" y1="0%" x2="0%" y2="100%">
                <stop offset="0%" style="stop-color:@GetLighterColor();stop-opacity:1" />
                <stop offset="100%" style="stop-color:@ColorBote;stop-opacity:1" />
            </linearGradient>

            <!-- Highlight gradient -->
            <linearGradient id="@highlightId" x1="0%" y1="0%" x2="0%" y2="100%">
                <stop offset="0%" style="stop-color:white;stop-opacity:0.4" />
                <stop offset="100%" style="stop-color:white;stop-opacity:0" />
            </linearGradient>
        </defs>

        <!-- Shadow -->
        <ellipse cx="95" cy="330" rx="45" ry="8" fill="black" opacity="0.15" />

        <!-- Main square body (3D effect) -->
        <!-- Side face (darker) -->
        <path d="M 130 90 L 150 100 L 150 320 L 130 310 Z" fill="@GetDarkerColor()" />

        <!-- Top face -->
        <path d="M 40 90 L 60 80 L 150 80 L 130 90 Z" fill="@GetLighterColor()" />

        <!-- Front face -->
        <rect x="40" y="90" width="90" height="220" fill="url(#@frontGradientId)" rx="2" ry="2" />

        <!-- Neck -->
        <rect x="70" y="65" width="40" height="30" fill="url(#@frontGradientId)" />
        <path d="M 110 65 L 120 60 L 120 85 L 110 95 Z" fill="@GetDarkerColor()" />

        <!-- Bottle opening -->
        <rect x="77" y="50" width="26" height="20" fill="@GetDarkerColor()" />
        <ellipse cx="90" cy="50" rx="13" ry="4" fill="@GetDarkerColor()" />

        <!-- Highlight for glass effect -->
        <rect x="50" y="100" width="25" height="150" fill="url(#@highlightId)" rx="2" ry="2" opacity="0.6" />

        <!-- Label area (optional) -->
        @if (ShowLabel)
        {
            <rect x="45" y="140" width="80" height="100"
                  fill="white"
                  opacity="0.9"
                  rx="2" ry="2" />
        }

        <!-- Edge highlights for more realism -->
        <line x1="40" y1="90" x2="40" y2="310" stroke="white" stroke-width="1" opacity="0.3" />
        <line x1="130" y1="90" x2="130" y2="310" stroke="black" stroke-width="1" opacity="0.2" />
    </svg>
</div>

@code {
    [Parameter] public string ColorBote { get; set; } = "#E0E0E0";
    [Parameter] public bool ShowLabel { get; set; } = false;

    private string frontGradientId = $"front-gradient-{Guid.NewGuid():N}";
    private string topGradientId = $"top-gradient-{Guid.NewGuid():N}";
    private string highlightId = $"highlight-{Guid.NewGuid():N}";

    protected override void OnInitialized()
    {
        // Ensure we have a valid color
        if (string.IsNullOrWhiteSpace(ColorBote))
        {
            ColorBote = "#E0E0E0"; // Default gray color
        }
    }

    private string GetDarkerColor()
    {
        return AdjustColorBrightness(ColorBote, 0.6);
    }

    private string GetLighterColor()
    {
        return AdjustColorBrightness(ColorBote, 1.4);
    }

    private string AdjustColorBrightness(string hexColor, double factor)
    {
        try
        {
            var color = hexColor.TrimStart('#');
            if (color.Length == 6)
            {
                var r = Convert.ToInt32(color.Substring(0, 2), 16);
                var g = Convert.ToInt32(color.Substring(2, 2), 16);
                var b = Convert.ToInt32(color.Substring(4, 2), 16);

                // Adjust brightness
                r = Math.Min(255, Math.Max(0, (int)(r * factor)));
                g = Math.Min(255, Math.Max(0, (int)(g * factor)));
                b = Math.Min(255, Math.Max(0, (int)(b * factor)));

                return $"#{r:X2}{g:X2}{b:X2}";
            }
        }
        catch
        {
            // If parsing fails, return original color
        }

        return hexColor;
    }
}

<style>
    .bote-container {
        display: inline-block;
        position: relative;
    }

    .bote-square {
        filter: drop-shadow(3px 5px 8px rgba(0, 0, 0, 0.2));
    }
</style>