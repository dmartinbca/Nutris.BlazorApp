@namespace NutrisBlazor.Components.Bote
@using Microsoft.AspNetCore.Components

<div class="bote-container" style="width: 190px;">
    <svg viewBox="0 0 190 350"
         xmlns="http://www.w3.org/2000/svg"
         class="bote-round"
         style="width: 100%; height: auto;">

        <!-- Bottle body (round shape) -->
        <defs>
            <!-- Gradient for glass effect -->
            <radialGradient id="@gradientId" cx="50%" cy="50%" r="50%">
                <stop offset="0%" style="stop-color:@GetLighterColor();stop-opacity:1" />
                <stop offset="70%" style="stop-color:@ColorBote;stop-opacity:1" />
                <stop offset="100%" style="stop-color:@GetDarkerColor();stop-opacity:1" />
            </radialGradient>

            <!-- Highlight gradient -->
            <ellipticalGradient id="@highlightId">
                <stop offset="0%" style="stop-color:white;stop-opacity:0.4" />
                <stop offset="100%" style="stop-color:white;stop-opacity:0" />
            </ellipticalGradient>

            <!-- Shadow filter -->
            <filter id="@shadowId">
                <feGaussianBlur in="SourceAlpha" stdDeviation="3" />
                <feOffset dx="2" dy="4" result="offsetblur" />
                <feComponentTransfer>
                    <feFuncA type="linear" slope="0.2" />
                </feComponentTransfer>
                <feMerge>
                    <feMergeNode />
                    <feMergeNode in="SourceGraphic" />
                </feMerge>
            </filter>
        </defs>

        <!-- Shadow -->
        <ellipse cx="95" cy="330" rx="50" ry="10" fill="black" opacity="0.2" />

        <!-- Main round body -->
        <circle cx="95" cy="200" r="65" fill="url(#@gradientId)" filter="url(#@shadowId)" />

        <!-- Neck -->
        <path d="M 80 145 L 85 70 L 105 70 L 110 145 Z" fill="url(#@gradientId)" />

        <!-- Bottle opening -->
        <rect x="82" y="55" width="26" height="20" fill="@GetDarkerColor()" />
        <ellipse cx="95" cy="55" rx="13" ry="4" fill="@GetDarkerColor()" />

        <!-- Highlight for glass effect -->
        <ellipse cx="75" cy="180" rx="20" ry="35" fill="white" opacity="0.3" />

        <!-- Label area (optional) -->
        @if (ShowLabel)
        {
            <path d="M 60 180 A 65 65 0 0 0 130 180 L 130 220 A 65 65 0 0 1 60 220 Z"
                  fill="white"
                  opacity="0.9" />
        }
    </svg>
</div>

@code {
    [Parameter] public string ColorBote { get; set; } = "#E0E0E0";
    [Parameter] public bool ShowLabel { get; set; } = false;

    private string gradientId = $"gradient-{Guid.NewGuid():N}";
    private string highlightId = $"highlight-{Guid.NewGuid():N}";
    private string shadowId = $"shadow-{Guid.NewGuid():N}";

    protected override void OnInitialized()
    {
        // Ensure we have a valid color
        if (string.IsNullOrWhiteSpace(ColorBote))
        {
            ColorBote = "#E0E0E0"; // Default gray color
        }
    }

    private string GetDarkerColor()
    {
        return AdjustColorBrightness(ColorBote, 0.7);
    }

    private string GetLighterColor()
    {
        return AdjustColorBrightness(ColorBote, 1.3);
    }

    private string AdjustColorBrightness(string hexColor, double factor)
    {
        try
        {
            var color = hexColor.TrimStart('#');
            if (color.Length == 6)
            {
                var r = Convert.ToInt32(color.Substring(0, 2), 16);
                var g = Convert.ToInt32(color.Substring(2, 2), 16);
                var b = Convert.ToInt32(color.Substring(4, 2), 16);

                // Adjust brightness
                r = Math.Min(255, Math.Max(0, (int)(r * factor)));
                g = Math.Min(255, Math.Max(0, (int)(g * factor)));
                b = Math.Min(255, Math.Max(0, (int)(b * factor)));

                return $"#{r:X2}{g:X2}{b:X2}";
            }
        }
        catch
        {
            // If parsing fails, return original color
        }

        return hexColor;
    }
}

<style>
    .bote-container {
        display: inline-block;
        position: relative;
    }

    .bote-round {
        filter: drop-shadow(2px 4px 8px rgba(0, 0, 0, 0.15));
    }
</style>