@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject ILocalizationService Localization
@inject ILocalStorageService LocalStorage
@implements IDisposable
<link href="css/MainLayout.css" rel="stylesheet" />

<div class="page-layout">
    @if (ShowSidebar)
    {
        <!-- Hamburger Button solo para móvil -->
        <button class="hamburger-menu @(isSidebarOpen ? "active" : "")" @onclick="ToggleSidebar">
            <span></span>
            <span></span>
            <span></span>
        </button>

        <!-- Overlay para móvil cuando el menú está abierto -->
        @if (isSidebarOpen)
        {
            <div class="sidebar-overlay" @onclick="CloseSidebar"></div>
        }

        <!-- Sidebar con clase condicional para móvil -->
        <div class="sidebar @(isSidebarOpen ? "mobile-active" : "")">
            <div class="content-sidebar">
                <div>
                    <a href="/home">
                        <div class="logo">
                            <img alt="nutris logo" class="w-75" src="/logonutris.svg" />
                        </div>
                    </a>

                    <div class="nav-container">
                        <nav class="font-20">
                            <NavLink href="/home" Match="NavLinkMatch.All">
                                <div class="navgrid">
                                    <img src="/menu/feamehome.svg" alt="home">
                                    <span>@Localization["NavBar.Home"]</span>
                                </div>
                            </NavLink>
                            <NavLink href="/yourproducts">
                                <div class="navgrid">
                                    <img src="/menu/yourproducts.svg" alt="yourproducts">
                                    <span>@Localization["NavBar.YourProducts"]</span>
                                </div>
                            </NavLink>
                            <NavLink href="/customize">
                                <div class="navgrid">
                                    <img src="/menu/customize.svg" alt="customize">
                                    <span>@Localization["NavBar.Customize"]</span>
                                </div>
                            </NavLink>
                        </nav>
                    </div>
                    <hr class="lineb">
                </div>

                <div class="perfil-container">
                    <!-- AQUÍ ESTÁ EL CAMBIO - Avatar clickeable -->
                    <div class="avatar-container" @onclick="NavigateToProfile" style="cursor: pointer;">
                        @if (!string.IsNullOrEmpty(customerLogo))
                        {
                            <img src="@($"data:image/png;base64,{customerLogo}")" alt="" class="avatar">
                        }
                        <div class="text-titles">
                            <h2>@userName</h2>
                        </div>
                    </div>

                    <div class="icons-acount">
                        <img @onclick="ShowLogoutModal" src="/menu/exit.svg" alt="exit" style="cursor: pointer;">
                        <img src="/menu/interrogacion.png" alt="help" style="width: 25px; cursor: pointer;"
                             @onmouseover="() => isTooltipVisible = true"
                             @onmouseleave="() => isTooltipVisible = false">
                        <!-- TAMBIÉN PUEDES HACER CLICKEABLE EL ICONO DE PERFIL -->
                        <img @onclick="NavigateToProfile"
                             src="/menu/perfil.svg"
                             alt="perfil"
                             style="cursor: pointer;"
                             title="Ver perfil del cliente">

                        @if (isTooltipVisible)
                        {
                            <div class="tooltip-custom">
                                <p>@Localization["NavBar.Needhelp"]</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="content-area">
        @Body
    </div>
</div>

<!-- Logout Modal COMPLETO -->
@if (showLogoutModal)
{
    <!-- Backdrop -->
    <div class="logout-modal-backdrop" @onclick="CancelLogout"></div>

    <!-- Modal -->
    <div class="logout-modal-wrapper">
        <div class="logout-modal-container">
            <!-- Botón X para cerrar -->
            <button class="modal-close-btn" @onclick="CancelLogout">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M18 6L6 18" stroke="#666" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M6 6L18 18" stroke="#666" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
            </button>

            <!-- Título del modal -->
            <div class="modal-header-custom">
                <h3>@Localization["NavBar.Confirm"]</h3>
            </div>

            <!-- Contenido -->
            <div class="modal-body-custom">
                <p class="modal-question">@Localization["NavBar.logout"]</p>

                <!-- Botones -->
                <div class="modal-buttons">
                    <button class="btn-modal-cancel"
                            @onclick="CancelLogout"
                            disabled="@isProcessing">
                        @Localization["NavBar.Cancel"]
                    </button>

                    <button class="btn-modal-confirm"
                            @onclick="Logout"
                            disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-logout"></span>
                            <span>Cerrando...</span>
                        }
                        else
                        {
                            <span>@Localization["NavBar.SignOut"]</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool ShowSidebar { get; set; }
    private bool showLogoutModal = false;
    private bool isTooltipVisible = false;
    private bool isSidebarOpen = false;
    private string userName = "";
    private string customerLogo = "";
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += HandleLocationChanged;
        UpdateSidebarVisibility();
        await LoadUserData();
        Localization.OnLanguageChanged += OnLanguageChanged;
    }

    private async Task LoadUserData()
    {
        var user = await AuthService.GetCurrentUserAsync();
        if (user != null)
        {
            userName = user.Name;
        }
        else
        {
            userName = await LocalStorage.GetItemAsync<string>("name") ?? "Guest";
        }

        customerLogo = await LocalStorage.GetItemAsync<string>("logo") ?? "";
    }

    private void OnLanguageChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateSidebarVisibility();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateSidebarVisibility()
    {
        var uri = Navigation.Uri;
        ShowSidebar = !uri.EndsWith("/") && !uri.Contains("/login");
    }

    private void ShowLogoutModal()
    {
        showLogoutModal = true;
    }

    private void CancelLogout()
    {
        showLogoutModal = false;
        StateHasChanged();
    }

    private async Task Logout()
    {
        if (isProcessing) return;

        isProcessing = true;
        StateHasChanged();

        try
        {
            await Task.Delay(500); // Pequeña demora para mostrar el spinner
            await AuthService.LogoutAsync();
            Navigation.NavigateTo("/", true);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
    }

    private void CloseSidebar()
    {
        isSidebarOpen = false;
    }

    // NUEVO MÉTODO PARA NAVEGAR AL PERFIL
    private void NavigateToProfile()
    {
        Navigation.NavigateTo("/customer-profile");
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
        Localization.OnLanguageChanged -= OnLanguageChanged;
    }
}