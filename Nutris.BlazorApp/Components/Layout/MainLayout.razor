@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject ILocalizationService Localization
@inject ILocalStorageService LocalStorage
@implements IDisposable
<link href="css/MainLayout.css" rel="stylesheet" />
<div class="page-layout">
    @if (ShowSidebar)
    {
        <!-- Sidebar inline temporal para verificar -->
        <div class="sidebar">
            <div class="content-sidebar">
                <div>
                    <a href="/home">
                        <div class="logo">
                            <img alt="nutris logo" class="w-75" src="/logonutris.svg" />
                        </div>
                    </a>

                    <div class="nav-container">
                        <nav class="font-20">
                            <NavLink href="/home" Match="NavLinkMatch.All">
                                <div class="navgrid">
                                    <img src="/menu/feamehome.svg" alt="home">
                                    <span>@Localization["NavBar.Home"]</span>
                                </div>
                            </NavLink>
                            <NavLink href="/yourproducts">
                                <div class="navgrid">
                                    <img src="/menu/yourproducts.svg" alt="yourproducts">
                                    <span>@Localization["NavBar.YourProducts"]</span>
                                </div>
                            </NavLink>
                            <NavLink href="/customize">
                                <div class="navgrid">
                                    <img src="/menu/customize.svg" alt="customize">
                                    <span>@Localization["NavBar.Customize"]</span>
                                </div>
                            </NavLink>
                        </nav>
                    </div>
                    <hr class="lineb">
                </div>

                <div class="perfil-container">
                    <div class="avatar-container">
                        @if (!string.IsNullOrEmpty(customerLogo))
                        {
                            <img src="@($"data:image/png;base64,{customerLogo}")" alt="" class="avatar">
                        }
                        <div class="text-titles">
                            <h2>@userName</h2>
                        </div>
                    </div>

                    <div class="icons-acount">
                        <img @onclick="ShowLogoutModal" src="/menu/exit.svg" alt="exit">
                        <img src="/menu/interrogacion.png" alt="help" style="width: 25px;"
                             @onmouseover="() => isTooltipVisible = true"
                             @onmouseleave="() => isTooltipVisible = false">
                        <img src="/menu/perfil.svg" alt="perfil">

                        @if (isTooltipVisible)
                        {
                            <div class="tooltip-custom">
                                <p>@Localization["NavBar.Needhelp"]</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="content-area">
        @Body
    </div>
</div>

<!-- Logout Modal -->
@if (showLogoutModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Localization["NavBar.Confirm"]</h5>
                    <button type="button" class="btn-close" @onclick="() => showLogoutModal = false"></button>
                </div>
                <div class="modal-body">
                    <p class="text-center">@Localization["NavBar.logout"]</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showLogoutModal = false">
                        @Localization["NavBar.Cancel"]
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="Logout">
                        @Localization["NavBar.SignOut"]
                    </button>
                </div>
            </div>
        </div>
    </div>
}

 

@code {
    private bool ShowSidebar { get; set; }
    private bool showLogoutModal = false;
    private bool isTooltipVisible = false;
    private string userName = "";
    private string customerLogo = "";

    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += HandleLocationChanged;
        UpdateSidebarVisibility();
        await LoadUserData();

        // Suscribirse a cambios de idioma
        Localization.OnLanguageChanged += OnLanguageChanged;
    }

    private async Task LoadUserData()
    {
        var user = await AuthService.GetCurrentUserAsync();
        if (user != null)
        {
            userName = user.Name;
        }
        else
        {
            userName = await LocalStorage.GetItemAsync<string>("name") ?? "Guest";
        }

        customerLogo = await LocalStorage.GetItemAsync<string>("logo") ?? "";
    }

    private void OnLanguageChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateSidebarVisibility();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateSidebarVisibility()
    {
        var uri = Navigation.Uri;
        ShowSidebar = !uri.EndsWith("/") && !uri.Contains("/login");
    }

    private void ShowLogoutModal()
    {
        showLogoutModal = true;
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/", true);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
        Localization.OnLanguageChanged -= OnLanguageChanged;
    }
}