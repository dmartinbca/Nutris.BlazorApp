@namespace Nutris.BlazorApp.Components.Orders.Steps
@using NutrisBlazor.Services
@inject ILocalizationService Localization
<link href="/css/StepProgressBar.css" rel="stylesheet" />
<link href="/css/fonts.css" rel="stylesheet" />
<div class="steps-progress-container">
    <div class="steps-progress-inner-wrapper">
        <div class="steps-progress-bar">
            @for (int i = 1; i <= 5; i++)
            {
                var stepIndex = GetOriginalStepIndex(i);
                var displayIndex = i;
                var stepClass = GetStepClass(stepIndex);
                var isCompleted = IsStepCompleted(stepIndex);

                <div class="step-item @stepClass" data-step="@displayIndex">
                    <div class="step-content">
                        <span class="step-text">@GetStepText(stepIndex)</span>
                        @if (isCompleted)
                        {
                            <span class="step-check">✓</span>
                        }
                    </div>
                    @if (i < 5)
                    {
                        <div class="step-connector">
                            <div class="connector-line"></div>
                            <div class="connector-arrow">
                                <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M3 6H9M9 6L6 3M9 6L6 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string Status { get; set; } = "Desarrollo";
    [Parameter] public bool CustomerAccepted { get; set; } = false;
    [Parameter] public int PercentFilledFormulation { get; set; } = 0;
    [Parameter] public int PercentFilledBottle { get; set; } = 0;
    [Parameter] public int PercentFilledLabel { get; set; } = 0;
    [Parameter] public int PercentFilledPalletizing { get; set; } = 0;
    [Parameter] public int PercentFilledAnalytics { get; set; } = 0;
    [Parameter] public string Prefix { get; set; } = "RG35";
    [Parameter] public bool Status37 { get; set; } = false;
    [Parameter] public string ProductType { get; set; } = "Bote";
    [Parameter] public bool NoLabel { get; set; } = false;
    [Parameter] public bool NoAnalytics { get; set; } = false;

    // Mapeo del nuevo orden al índice original
    // Nuevo orden: 1, 5, 2, 3, 4
    private int GetOriginalStepIndex(int displayPosition)
    {
        return displayPosition switch
        {
            1 => 1, // "Listo para la formulación" permanece en posición 1
            2 => 5, // "Pendiente aprobación calidad" ahora en posición 2
            3 => 2, // "Listo para diseño de envasado" ahora en posición 3
            4 => 3, // "Realizando la última revisión" ahora en posición 4
            5 => 4, // "Listo para producción" ahora en posición 5
            _ => displayPosition
        };
    }

    private string GetStepText(int step)
    {
        return step switch
        {
            1 => Localization["Steps.Step1"] ?? "Listo para la formulación",
            2 => Localization["Steps.Step2"] ?? "Listo para diseño de envasado",
            3 => Localization["Steps.Step3"] ?? "Realizando la última revisión",
            4 => Localization["Steps.Step4"] ?? "Listo para producción",
            5 => Localization["Steps.Step5"] ?? "Pendiente aprobación calidad",
            _ => ""
        };
    }

    private string GetStepClass(int step)
    {
        var stepState = GetStepState(step);

        var classes = new List<string>();

        switch (stepState)
        {
            case StepState.Completed:
                classes.Add("step-completed");
                break;
            case StepState.InProgress:
                classes.Add("step-in-progress");
                break;
            case StepState.Pending:
            default:
                classes.Add("step-pending");
                break;
        }

        return string.Join(" ", classes);
    }

    private enum StepState
    {
        Pending,
        InProgress,
        Completed
    }

    private StepState GetStepState(int step)
    {
        const string verde = "#8ED300";
        const string verdeSuave = "#FFA500";
        const string gris = "#E5E5E5";

        string color = GetStepColor(step);

        if (color == verde)
            return StepState.Completed;
        if (color == verdeSuave)
            return StepState.InProgress;
        return StepState.Pending;
    }

    private string GetStepColor(int step)
    {
        const string verde = "#8ED300";
        const string verdeSuave = "#FFA500";
        const string gris = "#E5E5E5";

        if (Prefix == "RG37")
        {
            if (step == 1)
            {
                if (PercentFilledFormulation == 100 && (Status == "Cerrado cliente" || Status == "Cerrado cliente y calidad"))
                    return verde;
                if (PercentFilledFormulation > 0 && Status == "Desarrollo")
                    return verdeSuave;
                return gris;
            }
            if (step == 5)
            {
                if (Status == "Cerrado cliente y calidad") return verde;
                if (Status == "Cerrado cliente") return verdeSuave;
                return gris;
            }
            return gris;
        }

        // RG35
        if (Prefix == "RG35" && step == 1 && Status37)
        {
            return verde;
        }

        if (step == 2)
        {
            if (ProductType == "Bulk")
            {
                if (PercentFilledPalletizing == 100 && (NoAnalytics || PercentFilledAnalytics == 100) &&
                    (Status == "Cerrado cliente" || Status == "Cerrado cliente y calidad"))
                    return verde;
                if (PercentFilledPalletizing > 0 || (NoAnalytics || PercentFilledAnalytics > 0))
                    return verdeSuave;
                return gris;
            }
            else
            {
                if (PercentFilledBottle == 100 && (PercentFilledLabel == 100 || NoLabel) &&
                    PercentFilledPalletizing == 100 && (NoAnalytics || PercentFilledAnalytics == 100) &&
                    (Status == "Cerrado cliente" || Status == "Cerrado cliente y calidad"))
                    return verde;
                if (PercentFilledBottle > 0 || PercentFilledLabel > 0 || PercentFilledPalletizing > 0 ||
                    (NoAnalytics || PercentFilledAnalytics > 0))
                    return verdeSuave;
                return gris;
            }
        }

        if (step == 3)
        {
            if (Status == "Cerrado cliente y calidad") return verde;
            if (Status == "Cerrado cliente") return verdeSuave;
            return gris;
        }

        if (step == 4)
        {
            if (Status == "Cerrado cliente y calidad") return verdeSuave;
            return gris;
        }

        if (step == 5)
        {
            if (Prefix == "RG35" && Status37) return verde;
            return gris;
        }

        return gris;
    }

    private bool IsStepCompleted(int step)
    {
        return GetStepState(step) == StepState.Completed;
    }

    private bool IsStepInProgress(int step)
    {
        return GetStepState(step) == StepState.InProgress;
    }

    private bool IsStepCurrent(int step)
    {
        // El paso actual es el primer paso en progreso o pendiente
        for (int i = 1; i <= 5; i++)
        {
            var state = GetStepState(i);
            if (state == StepState.InProgress)
                return i == step;
            if (state == StepState.Pending)
                return i == step;
        }
        return false;
    }
}
