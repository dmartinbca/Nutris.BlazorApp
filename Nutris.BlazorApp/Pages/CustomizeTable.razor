@page "/customize"
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using System.Linq
@using NutrisBlazor.Components.Shared

@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IApiService ApiService
@inject ILocalStorageService LocalStorage
@inject ILocalizationService Localization
@implements IDisposable
<link href="css/CustomizeTable.css" rel="stylesheet" />
<link href="css/fonts.css" rel="stylesheet" />

<PageTitle>@Localization["NavBar.Customize"] - NutrisBlazor</PageTitle>

<!-- Language Selector -->
<div class="language-selector-products">
    <button class="language-button" type="button" @onclick="ToggleLanguageMenu">
        @if (currentLanguage == "es")
        {
            <span>Español</span>
        }
        else
        {
            <span>English</span>
        }
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
        </svg>
    </button>

    @if (showLanguageMenu)
    {
        <div class="language-dropdown">
            <button class="dropdown-item" type="button" @onclick="@(() => SelectLanguage("en"))">
                English
            </button>
            <button class="dropdown-item" type="button" @onclick="@(() => SelectLanguage("es"))">
                Español
            </button>
        </div>
    }
</div>

@* <!-- Back Button -->
<div class="back-button-container">
    <button class="back-button" @onclick="GoBack">
        <svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="32" cy="32" r="32" fill="#2F5496" />
            <path d="M47 32.126H18.608M25.7061 23L17.297 31.409C16.901 31.805 16.901 32.447 17.297 32.843L25.7061 41.252"
                  stroke="white" stroke-width="2.3" stroke-linecap="round" />
        </svg>
    </button>
</div>
 *@


@if (IsLoading)
{
     <Loading LoadingText="@GetTranslation("Message.Loading", "Loading...")" />
}
else
{
    <div class="products-main-content">
        @if (ProductList.Any())
        {
            <div class="products-search-container">
                <form class="products-search-form-grid" @onsubmit:preventDefault="true">
                    <input class="products-search-field" type="text" @bind="searchTerm" @bind:event="oninput"
                           name="search" placeholder="@Localization["Search"]...">
                    <button class="products-search-btn" type="submit"></button>
                </form>
                <div style="position: relative; display: inline-block;">
                    <svg class="products-search-btn-filter" @onclick="OpenFilterModal"
                         xmlns="http://www.w3.org/2000/svg" width="30" height="26" viewBox="0 0 24 24"
                         fill="none" stroke="#2F5496" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
                    </svg>
                </div>
            </div>

            <div class="products-table-container">
                <table class="products-customize">
                    <thead>
                        <tr>
                            <th class="MuseoSemiBold font-20 p-3">@Localization["code"]</th>
                            <th class="MuseoSemiBold font-20 p-3">@Localization["product_name"]</th>
                            <th class="MuseoSemiBold font-20 p-3">@Localization["container"]</th>
                            <th class="MuseoSemiBold font-20 p-3">@Localization["units_per_container"]</th>
                            <th class="MuseoSemiBold font-20 p-3">@Localization["status"]</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in GetFilteredList())
                        {
                            <tr class="RalewayRegular font-16">
                                <td class="p-2"><p>@item.Code</p></td>
                                <td class="p-2">
                                    @if (!string.IsNullOrEmpty(item.Product_name))
                                    {
                                        <p>@item.Product_name</p>
                                    }
                                    else
                                    {
                                        <p>-</p>
                                    }
                                </td>
                                <td class="p-2"><p>@item.Container</p></td>
                                <td class="p-2">
                                    <p>@(item.Units_per_container == 0 ? "-" : item.Units_per_container.ToString())</p>
                                </td>
                                <td class="p-2">
                                    <div class="@GetStatusClass(item.Status) text-center">
                                        @Localization[item.Status]
                                        @if (item.Status == "Cerrado cliente y calidad")
                                        {
                                            <span class="step-check">✓</span>
                                        }
                                    </div>
                                </td>
                                <td class="p-2">
                                    <button class="products-order-btn d-flex" @onclick="() => NavigateToCustomize(item.Code)">
                                        <span>@Localization["ButtonCustomize"]</span>
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                        </svg>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
             <div class="products-empty-container">
                <div class="products-empty-content">
                    <img src="img/empty-table.svg" alt="empty">
                    <h2>@Localization["Empty.there"]</h2>
                    <p>@Localization["Empty.contact"]</p>
                </div>
            </div>
        }
    </div>
}

<!-- Filter Modal -->
@if (showFilterModal)
{
    <div class="products-modal-backdrop" @onclick="CloseFilterModal"></div>
    <div class="products-filter-modal">
        <div class="products-filter-modal-content">
            <div class="products-filter-modal-header">
                <h3>@Localization["Filter"]</h3>
                <button class="products-close-btn" @onclick="CloseFilterModal">&times;</button>
            </div>
            <div class="products-filter-modal-body">
                <div class="products-filter-group">
                    <label>@Localization["container"]</label>
                    <select @bind="filter.Container" class="products-form-control">
                        <option value="">@Localization["All"]</option>
                        <option value="Bote">@Localization["Bote"]</option>
                        <option value="Bulk">@Localization["Bulk"]</option>
                    </select>
                </div>
                <div class="products-filter-group">
                    <label>@Localization["status"]</label>
                    <select @bind="filter.Status" class="products-form-control">
                        <option value="">@Localization["All"]</option>
                        <option value="Cerrado cliente y calidad">@Localization["Cerrado cliente y calidad"]</option>
                        <option value="Cerrado cliente">@Localization["Cerrado cliente"]</option>
                        <option value="Desarrollo">@Localization["Desarrollo"]</option>
                    </select>
                </div>
            </div>
            <div class="products-filter-modal-footer">
                <button class="products-btn-clear" @onclick="ClearFilter">@Localization["Clear"]</button>
                <button class="products-btn-apply" @onclick="ApplyFilter">@Localization["Apply"]</button>
            </div>
        </div>
    </div>
}

@code {
    // State Management
    private bool IsLoading = true;
    private List<Product> ProductList = new();
    private string searchTerm = "";
    private bool showFilterModal = false;
    private bool showLanguageMenu = false;
    private string currentLanguage = "es";

    // Filter State
    private FilterModel filter = new FilterModel();

    // Options for filters
    private readonly List<string> containerOptions = new() { "Bote", "Bulk" };
    private readonly List<string> statusOptions = new()
    {
        "Cerrado cliente",
        "Desarrollo",
        "Cerrado cliente y calidad"
    };

    public class ApiResponseP
    {
        public List<Product> Value { get; set; } = new();
    }

    // Product Model
    public class Product
    {
        public string Code { get; set; } = "";
        public string Product_name { get; set; } = "";
        public string Container { get; set; } = "";
        public int Units_per_container { get; set; }
        public string Status { get; set; } = "";
        public bool Has_RG35 { get; set; }
    }

    // Filter Model
    public class FilterModel
    {
        public string Container { get; set; } = "";
        public string Status { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        // Obtener idioma actual
        currentLanguage = Localization.CurrentLanguage ?? "es";

        // Suscribirse a cambios de idioma
        Localization.OnLanguageChanged += OnLanguageChanged;

        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            IsLoading = true;
            ProductList.Clear();

            // Get customer number from localStorage
            var customerNo = await JS.InvokeAsync<string>("localStorage.getItem", "No_");

            if (string.IsNullOrEmpty(customerNo))
            {
                Console.WriteLine("No customer number found in localStorage");
                return;
            }

            // Build filter strings
            var filter37 = $"Customer eq '{customerNo}' and " +
                          "(Status eq 'Cerrado cliente' or Status eq 'Desarrollo' or Status eq 'Cerrado cliente y calidad') " +
                          "and Has_RG35 eq false";

            var filter35 = $"Customer eq '{customerNo}' and " +
                          "(Status eq 'Cerrado cliente' or Status eq 'Desarrollo')";

            // Load RG37 products
            var response37 = await ApiService.GetAsync<ApiResponseP>($"CustomizeList37?tenant=nutris&$filter={filter37}");
            if (response37?.Value != null)
            {
                foreach (var item in response37.Value)
                {
                    if (item.Has_RG35 != true) // Only add if not Has_RG35
                    {
                        ProductList.Add(new Product
                        {
                            Code = item.Code ?? "",
                            Product_name = item.Product_name ?? "",
                            Container = item.Container ?? "",
                            Units_per_container = item.Units_per_container,
                            Status = item.Status ?? "",
                            Has_RG35 = item.Has_RG35
                        });
                    }
                }
            }

            // Load RG35 products
            var response35 = await ApiService.GetAsync<ApiResponseP>($"CustomizeList?tenant=nutris&$filter={filter35}");
            if (response35?.Value != null)
            {
                foreach (var item in response35.Value)
                {
                    if (item.Has_RG35 != true) // Only add if not Has_RG35
                    {
                        ProductList.Add(new Product
                        {
                            Code = item.Code ?? "",
                            Product_name = item.Product_name ?? "",
                            Container = item.Container ?? "",
                            Units_per_container = item.Units_per_container,
                            Status = item.Status ?? "",
                            Has_RG35 = item.Has_RG35
                        });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private List<Product> GetFilteredList()
    {
        var filtered = ProductList.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var search = searchTerm.ToLower();
            filtered = filtered.Where(item =>
                item.Code.ToLower().Contains(search) ||
                item.Product_name.ToLower().Contains(search) ||
                item.Container.ToLower().Contains(search) ||
                item.Units_per_container.ToString().Contains(search) ||
                GetStatusKey(item.Status).ToLower().Contains(search)
            );
        }

        // Apply container filter
        if (!string.IsNullOrEmpty(filter.Container))
        {
            filtered = filtered.Where(item => item.Container == filter.Container);
        }

        // Apply status filter
        if (!string.IsNullOrEmpty(filter.Status))
        {
            filtered = filtered.Where(item => item.Status == filter.Status);
        }

        return filtered.ToList();
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Cerrado cliente y calidad" => "products-status-finish",
            "Cerrado cliente" => "products-status-initial",
            "Desarrollo" => "products-status-develop",
            _ => ""
        };
    }
    private string GetTranslation(string key, string defaultValue)
    {
        var translation = Localization[key];
        return string.IsNullOrEmpty(translation) || translation == key ? defaultValue : translation;
    }
    private string GetStatusKey(string status)
    {
        if (string.IsNullOrEmpty(status)) return "";

        var key = status.Trim();
        var translated = Localization[key];

        // If translation exists and is different from key, return translation
        return !string.IsNullOrEmpty(translated) && translated != key ? translated : status;
    }

    private void NavigateToCustomize(string code)
    {
        Navigation.NavigateTo($"/customize-edit/{code}");
    }

    // Modal Methods
    private void OpenFilterModal()
    {
        showFilterModal = true;
    }

    private void CloseFilterModal()
    {
        showFilterModal = false;
    }

    private void ApplyFilter()
    {
        showFilterModal = false;
        StateHasChanged();
    }

    private void ClearFilter()
    {
        filter = new FilterModel();
        StateHasChanged();
    }

    private void OnLanguageChanged()
    {
        currentLanguage = Localization.CurrentLanguage;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleLanguageMenu()
    {
        showLanguageMenu = !showLanguageMenu;
    }

    private async Task SelectLanguage(string language)
    {
        showLanguageMenu = false;
        await Localization.ChangeLanguageAsync(language);
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/home");
    }

    public void Dispose()
    {
        Localization.OnLanguageChanged -= OnLanguageChanged;
    }
}