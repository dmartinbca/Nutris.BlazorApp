@page "/home"
@inject IAuthService AuthService
@inject ILocalizationService Localization
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@implements IDisposable
<link href="css/Home.css" rel="stylesheet" />
<PageTitle>Home - Nutris</PageTitle>

<!-- Language Selector -->
<div class="language-selector-home">
    <button class="language-button" type="button" @onclick="ToggleLanguageMenu">
        @if (currentLanguage == "es")
        {
            <span>Español</span>
        }
        else
        {
            <span>English</span>
        }
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
        </svg>
    </button>

    @if (showLanguageMenu)
    {
        <div class="language-dropdown">
            <button class="dropdown-item" type="button" @onclick="@(() => SelectLanguage("en"))">
                English
            </button>
            <button class="dropdown-item" type="button" @onclick="@(() => SelectLanguage("es"))">
                Español
            </button>
        </div>
    }
</div>

<!-- Home Content -->
<div class="main-content" id="home">

     <div class="text-home position-absolute z-10 top-0">
        <h1 class="font-82 MuseoSemiBold">@Localization["Home.Welcome"]</h1>
        <div class="pagraph-home font-20 RalewayRegular">
            <span>@Localization["Home.Text1"]</span>
            <span>@Localization["Home.Text2"]</span>
            <span>@Localization["Home.Text3"]</span>
            <span>@Localization["Home.Text4"]</span>
        </div>
    </div>
</div>



@code {
    private bool showLanguageMenu = false;
    private string currentLanguage = "en";

    protected override async Task OnInitializedAsync()
    {
        // Verificar autenticación
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/");
            return;
        }

        // Obtener idioma actual
        currentLanguage = Localization.CurrentLanguage ?? "en";

        // Suscribirse a cambios de idioma
        Localization.OnLanguageChanged += OnLanguageChanged;
    }

    private void OnLanguageChanged()
    {
        currentLanguage = Localization.CurrentLanguage;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleLanguageMenu()
    {
        showLanguageMenu = !showLanguageMenu;
    }

    private async Task SelectLanguage(string language)
    {
        showLanguageMenu = false;
        await Localization.ChangeLanguageAsync(language);
    }

    public void Dispose()
    {
        Localization.OnLanguageChanged -= OnLanguageChanged;
    }
}