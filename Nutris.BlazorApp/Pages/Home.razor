@page "/home"
@inject IAuthService AuthService
@inject ILocalizationService Localization
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@implements IDisposable
<link href="/css/Home.css" rel="stylesheet" />
<link href="/css/fonts.css" rel="stylesheet" />

<PageTitle>Home - Nutris</PageTitle>

<!-- Language Selector -->
<div class="language-selector-home">
    <button class="language-button" type="button" @onclick="ToggleLanguageMenu">
        @if (currentLanguage == "es")
        {
            <span>Español</span>
        }
        else
        {
            <span>English</span>
        }
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
        </svg>
    </button>

    @if (showLanguageMenu)
    {
        <div class="language-dropdown">
            <button class="dropdown-item" type="button" @onclick="@(() => SelectLanguage("en"))">
                English
            </button>
            <button class="dropdown-item" type="button" @onclick="@(() => SelectLanguage("es"))">
                Español
            </button>
        </div>
    }
</div>

<!-- Home Content con Slideshow -->
<div class="main-content" id="home">
    <!-- Slideshow de imágenes -->
    <div class="slideshow-container">
        @for (int i = 1; i <= 5; i++)
        {
            var imageIndex = i;
            <div class="slide @(currentImageIndex == imageIndex ? "active" : "")"
                 style="background-image: url('/img/@(imageIndex).avif');">
            </div>
        }
    </div>

    <!-- Indicadores opcionales -->
    <div class="slideshow-indicators">
        @for (int i = 1; i <= 5; i++)
        {
            var imageIndex = i;
            <span class="indicator @(currentImageIndex == imageIndex ? "active" : "")"
                  @onclick="() => GoToSlide(imageIndex)"></span>
        }
    </div>

    <!-- Texto superpuesto (SIN text-shadow) -->
    <div class="text-home">
        <h1 class="font-82 MuseoSemiBold">@Localization["Home.Welcome"]</h1>
        <div class="pagraph-home font-20 RalewayRegular">
            <span>@Localization["Home.Text1"]</span>
            <span>@Localization["Home.Text2"]</span>
            <span>@Localization["Home.Text3"]</span>
            <span>@Localization["Home.Text4"]</span>
        </div>
    </div>

    <!-- Enlace al Canal Ético (abajo a la derecha) -->
    <div class="whistleblower-link-container">
        <a href="@GetWhistleblowerPolicyUrl()" class="whistleblower-link">
            <span>@GetWhistleblowerLinkText()</span>
        </a>
    </div>
</div>

@code {
    private bool showLanguageMenu = false;
    private string currentLanguage = "en";
    private int currentImageIndex;
    private System.Threading.Timer? slideshowTimer;
    private const int TOTAL_SLIDES = 5;
    private Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/");
            return;
        }

        currentLanguage = Localization.CurrentLanguage ?? "en";
        Localization.OnLanguageChanged += OnLanguageChanged;
        currentImageIndex = random.Next(1, TOTAL_SLIDES + 1);
        StartSlideshow();
    }

    private void StartSlideshow()
    {
        slideshowTimer = new System.Threading.Timer(
            callback: _ => NextSlide(),
            state: null,
            dueTime: TimeSpan.FromSeconds(5),
            period: TimeSpan.FromSeconds(5)
        );
    }

    private void NextSlide()
    {
        InvokeAsync(() =>
        {
            currentImageIndex++;
            if (currentImageIndex > TOTAL_SLIDES)
            {
                currentImageIndex = 1;
            }
            StateHasChanged();
        });
    }

    private void GoToSlide(int index)
    {
        currentImageIndex = index;
        slideshowTimer?.Dispose();
        StartSlideshow();
    }

    private void OnLanguageChanged()
    {
        currentLanguage = Localization.CurrentLanguage;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleLanguageMenu()
    {
        showLanguageMenu = !showLanguageMenu;
    }

    private async Task SelectLanguage(string language)
    {
        showLanguageMenu = false;
        await Localization.ChangeLanguageAsync(language);
    }

    private string GetWhistleblowerPolicyUrl()
    {
        return currentLanguage == "es" ? "/politica-canal-etico" : "/whistleblower-policy";
    }

    private string GetWhistleblowerLinkText()
    {
        return currentLanguage == "es"
            ? "Canal Ético"
            : "Whistleblower Channel";
    }

    public void Dispose()
    {
        Localization.OnLanguageChanged -= OnLanguageChanged;
        slideshowTimer?.Dispose();
    }
}