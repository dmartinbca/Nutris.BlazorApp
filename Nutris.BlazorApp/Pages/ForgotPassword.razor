@page "/forgot-password"
@using System.Text.Json
@layout EmptyLayout
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IApiService Http
@inject ICustomizeApi Api
@inject ILocalizationService Localization
@implements IDisposable

<PageTitle>@Localization["ForgotPassword.TittleFP"]</PageTitle>

<div class="fondo">
    <!-- Language Selector -->
    <div class="language-selector-container">
        <button class="language-button" type="button" @onclick="ToggleLanguageMenu">
            @if (currentLanguage == "es")
            {
                <span>Español</span>
            }
            else
            {
                <span>English</span>
            }
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
            </svg>
        </button>

        @if (showLanguageMenu)
        {
            <div class="language-dropdown">
                <button class="dropdown-item" type="button" @onclick="@(() => SelectLanguage("en"))">
                    English
                </button>
                <button class="dropdown-item" type="button" @onclick="@(() => SelectLanguage("es"))">
                    Español
                </button>
            </div>
        }
    </div>

    <div class="container-fluid d-flex align-items-center justify-content-center">
        <div class="card shadow-sm form-container px-4">
            <div class="card-body">
                <div class="d-flex flex-column justify-content-center h-100">
                    <!-- Back button -->
                    <div class="mb-3">
                        <button @onclick="GoBack" class="back-button">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />
                            </svg>
                        </button>
                    </div>

                    @if (!emailSent)
                    {
                        <!-- Formulario -->
                        <div class="mb-3 d-flex justify-content-center">
                            <img src="/img/users.png" alt="users">
                        </div>

                        <div class="text-center mb-4">
                            <h3 class="form-title">@Localization["ForgotPassword.TittleFP2"]</h3>
                            <p class="form-subtitle">@Localization["ForgotPassword.Subtittle"]</p>
                        </div>

                        <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true" class="px-sm-5 mx-5">
                            <div class="info-box mb-4">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z" />
                                </svg>
                                <span>
                                    @Localization["ForgotPassword.Text"]
                                </span>
                            </div>

                            <div class="mb-3 @(usernameError ? "has-error" : "")">
                                <div class="position-relative">
                                    <input type="text"
                                           value="@username"
                                           @oninput="OnUsernameChange"
                                           class="form-control w-full"
                                           placeholder="@Localization["ForgotPassword.UsernamePlaceholder"]"
                                           required />
                                    @if (!string.IsNullOrEmpty(username))
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="svg" @onclick="ClearUsername">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                                        </svg>
                                    }
                                </div>
                                @if (usernameError)
                                {
                                    <span class="error-message">@Localization["ForgotPassword.UserReq"]</span>
                                }
                            </div>

                            <div class="d-flex justify-content-center mt-4">
                                <button type="submit" class="button-color" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-small"></span>
                                        <span>@Localization["ForgotPassword.Searching"]</span>
                                    }
                                    else
                                    {
                                        <span>@Localization["ForgotPassword.Send"]</span>
                                    }
                                </button>
                            </div>
                        </form>
                    }
                    else
                    {
                        <!-- Success Message -->
                        <div class="success-container text-center px-4">
                            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" viewBox="0 0 16 16" class="success-icon">
                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                            </svg>
                            <h3 class="success-title">@Localization["ForgotPassword.EmailSent"]</h3>
                            <p class="success-text">
                                @Localization["ForgotPassword.Successtext1"] <strong>@username</strong> @Localization["ForgotPassword.Successtext2"]
                            </p>
                            <p class="success-subtext">
                                @Localization["ForgotPassword.Successsubtext"]
                            </p>
                            <button type="button" class="button-color mt-3" @onclick="GoBack">
                                @Localization["ForgotPassword.Button"]
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .fondo {
        height: 100vh;
        background-image: url('/img/fondo.png');
        background-repeat: no-repeat;
        width: 100vw;
        background-size: cover;
        position: relative;
    }

    .language-selector-container {
        position: absolute;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }

    .language-button {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 50px;
        padding: 8px 20px;
        font-size: 14px;
        font-weight: 500;
        color: #495057;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: all 0.3s ease;
        min-width: 140px;
    }

        .language-button:hover {
            background: #f8f9fa;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

    .language-dropdown {
        position: absolute;
        top: calc(100% + 8px);
        right: 0;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        min-width: 150px;
        overflow: hidden;
    }

    .dropdown-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 16px;
        background: none;
        border: none;
        width: 100%;
        text-align: left;
        color: #495057;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .dropdown-item:hover {
            background-color: #f8f9fa;
        }

    .back-button {
        background: transparent;
        border: none;
        cursor: pointer;
        padding: 8px;
        transition: all 0.3s ease;
        color: var(--textButton);
    }

        .back-button:hover {
            transform: translateX(-5px);
        }

        .back-button svg {
            width: 24px;
            height: 24px;
        }

    html, body, .container-fluid {
        height: 100%;
    }

    .form-container {
        width: 53rem;
        height: 35rem;
    }

    @@media screen and (max-width: 1280px) {
        .form-container

    {
        width: 45rem !important;
        height: 30rem !important;
    }

    }

    @@media screen and (max-width: 768px) {
        .form-container

    {
        width: 90% !important;
        height: auto !important;
        min-height: 25rem;
    }

    .px-sm-5 {
        padding-left: 1rem !important;
        padding-right: 1rem !important;
    }

    .mx-5 {
        margin-left: 0.5rem !important;
        margin-right: 0.5rem !important;
    }

    }

    .form-title {
        color: var(--textButton);
        font-weight: 700;
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
    }

    .form-subtitle {
        color: #666;
        font-size: 1rem;
        margin-bottom: 0;
    }

    .info-box {
        display: flex;
        gap: 12px;
        background: #E8F4FF;
        border-left: 4px solid var(--textButton);
        padding: 15px;
        border-radius: 8px;
        align-items: flex-start;
    }

        .info-box svg {
            flex-shrink: 0;
            color: var(--textButton);
            margin-top: 2px;
        }

        .info-box span {
            font-size: 0.9rem;
            color: #333;
            line-height: 1.5;
        }

    input {
        background: var(--spaceWrite);
        border-color: transparent;
    }

    .svg {
        position: absolute;
        right: 5px;
        top: 5px;
        width: 5%;
        cursor: pointer;
    }

    .error-message {
        color: red;
        font-size: 0.8rem;
        margin-top: 5px;
        display: block;
    }

    .has-error input {
        border-color: red !important;
    }

    .button-color {
        background: var(--textButton);
        color: #fff;
        border-radius: 50px;
        min-width: 12rem;
        height: 3.375rem;
        border: 0;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        white-space: nowrap;
        padding: 0 1.5rem;
    }

        .button-color:hover:not(:disabled) {
            background: transparent;
            color: var(--textButton);
            border: 1px solid var(--textButton);
        }

        .button-color:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

    .spinner-small {
        width: 16px;
        height: 16px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-top-color: white;
        border-radius: 50%;
        animation: spin 0.8s linear infinite;
    }

    .success-container {
        padding: 2rem 0;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

        .success-container .button-color {
            margin-top: 1.5rem;
            width: auto;
        }

    .success-icon {
        color: #8ED300;
        margin-bottom: 1.5rem;
    }

    .success-title {
        color: var(--textButton);
        font-weight: 700;
        font-size: 1.5rem;
        margin-bottom: 1rem;
    }

    .success-text {
        color: #333;
        font-size: 1rem;
        line-height: 1.6;
        margin-bottom: 1rem;
    }

    .success-subtext {
        color: #666;
        font-size: 0.9rem;
        line-height: 1.5;
    }

    @@keyframes spin {
        to

    {
        transform: rotate(360deg);
    }

    }
</style>

@code {
    private string username = "";
    private bool usernameError = false;
    private bool isSubmitting = false;
    private bool emailSent = false;
    private bool showLanguageMenu = false;
    private string currentLanguage = "es";

    protected override async Task OnInitializedAsync()
    {
        currentLanguage = Localization.CurrentLanguage ?? "es";
        Localization.OnLanguageChanged += OnLanguageChanged;
    }

    private void OnLanguageChanged()
    {
        currentLanguage = Localization.CurrentLanguage;
        InvokeAsync(StateHasChanged);
    }

    private void OnUsernameChange(ChangeEventArgs e)
    {
        username = e.Value?.ToString() ?? "";
        usernameError = false;
    }

    private void ClearUsername()
    {
        username = "";
        usernameError = false;
    }

    private async Task HandleSubmit()
    {
        usernameError = string.IsNullOrWhiteSpace(username);

        if (usernameError)
        {
            return;
        }

        if (isSubmitting) return;

        isSubmitting = true;
        StateHasChanged();

        try
        {
            var payload = new { usuario = username };
            var resp = await Http.PostAsync("customReports(1)/Microsoft.NAV.envioPassword?tenant=nutris", payload);

            if (resp.IsSuccessStatusCode)
            {
                emailSent = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending password reset email: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private void ToggleLanguageMenu()
    {
        showLanguageMenu = !showLanguageMenu;
    }

    private async Task SelectLanguage(string language)
    {
        showLanguageMenu = false;
        currentLanguage = language;
        await Localization.ChangeLanguageAsync(language);
        StateHasChanged();
    }

    public void Dispose()
    {
        Localization.OnLanguageChanged -= OnLanguageChanged;
    }
}