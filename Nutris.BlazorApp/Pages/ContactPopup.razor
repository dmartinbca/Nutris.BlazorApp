@* ContactPopup.razor *@
@using NutrisBlazor.Services
@inject ILocalizationService Localization
@inject IJSRuntime JSRuntime
@inject IApiService Http
@inject ICustomizeApi Api
<link href="css/ContactPopup.css" rel="stylesheet" />
<link href="css/fonts.css" rel="stylesheet" />

@if (IsVisible)
{
    <!-- Fondo con imagen -->
    <div class="contact-backdrop">
        <div class="contact-fondo"></div>

        <!-- Container centrado -->
        <div class="contact-container-wrapper">
            <div class="contact-card shadow-sm">
                <div class="contact-card-body">
                    <div class="d-flex flex-column justify-content-center h-100">
                        <!-- Back button -->
                        <div class="mb-3">
                            <button @onclick="Close" class="contact-back-button">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                                </svg>
                            </button>
                        </div>

                        @if (!showSuccess)
                        {
                            <!-- Icon -->
                            <div class="mb-3 d-flex justify-content-center">
                                <img src="/img/users.png" alt="contact">
                            </div>

                            <!-- Title -->
                            <div class="text-center mb-4">
                                <h3 class="contact-title">@Localization["contact.SendMessage"]</h3>
                                <p class="contact-subtitle">@Localization["contact.HowCanWeHelp"]</p>
                            </div>

                            <!-- Form -->
                            <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true" class="px-sm-5 mx-5">
                                <!-- Nombre -->
                                <div class="contact-form-group">
                                    <div class="position-relative">
                                        <input type="text"
                                               class="contact-input"
                                               @bind="formData.Name"
                                               placeholder="@Localization["contact.Name"] (@Localization["contact.Optional"])" />
                                    </div>
                                </div>

                                <!-- Email -->
                                <div class="contact-form-group @(emailError ? "has-error" : "")">
                                    <div class="position-relative">
                                        <input type="email"
                                               class="contact-input"
                                               @bind="formData.Email"
                                               @oninput="ClearEmailError"
                                               placeholder="@Localization["contact.Email"] *"
                                               required />
                                        @if (!string.IsNullOrEmpty(formData.Email))
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="contact-clear-icon" @onclick="@(() => { formData.Email = ""; emailError = false; })">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                                            </svg>
                                        }
                                    </div>
                                    @if (emailError)
                                    {
                                        <span class="contact-error-message">@Localization["contact.EmailRequired"]</span>
                                    }
                                </div>

                                <!-- Teléfono -->
                                <div class="contact-form-group">
                                    <div class="position-relative">
                                        <input type="tel"
                                               class="contact-input"
                                               @bind="formData.Phone"
                                               placeholder="@Localization["contact.Phone"] (@Localization["contact.Optional"])" />
                                    </div>
                                </div>

                                <!-- Mensaje -->
                                <div class="contact-form-group @(messageError ? "has-error" : "")">
                                    <div class="position-relative">
                                        <textarea class="contact-textarea"
                                                  @bind="formData.Message"
                                                  @oninput="ClearMessageError"
                                                  rows="4"
                                                  placeholder="@Localization["contact.EnterMessage"] *"
                                                  required></textarea>
                                    </div>
                                    @if (messageError)
                                    {
                                        <span class="contact-error-message">@Localization["contact.MessageRequired"]</span>
                                    }
                                </div>

                                <!-- Submit Button -->
                                <div class="d-flex justify-content-center mt-4">
                                    <button type="submit" class="contact-button" disabled="@isSubmitting">
                                        @if (isSubmitting)
                                        {
                                            <span class="contact-spinner"></span>
                                            <span>@Localization["contact.Sending"]...</span>
                                        }
                                        else
                                        {
                                            <span>@Localization["contact.Send"]</span>
                                        }
                                    </button>
                                </div>
                            </form>
                        }
                        else
                        {
                            <!-- Success Message -->
                            <div class="contact-success-container text-center px-4">
                                <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" viewBox="0 0 16 16" class="contact-success-icon">
                                    <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                                </svg>
                                <h3 class="contact-success-title">@Localization["contact.MessageSentSuccess"]</h3>
                                <p class="contact-success-text">Tu mensaje ha sido enviado correctamente. Nos pondremos en contacto contigo pronto.</p>
                                <button type="button" class="contact-button mt-3" @onclick="Close">
                                    Cerrar
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private ContactFormData formData = new();
    private bool emailError = false;
    private bool messageError = false;
    private bool isSubmitting = false;
    private bool showSuccess = false;

    private class ContactFormData
    {
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Phone { get; set; } = "";
        public string Message { get; set; } = "";
    }

    private void Close()
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(false);
        OnClose.InvokeAsync();

        // Pequeño delay antes de resetear para la animación
        _ = Task.Run(async () =>
        {
            await Task.Delay(300);
            await InvokeAsync(() =>
            {
                ResetForm();
                StateHasChanged();
            });
        });
    }

    private void ClearEmailError(ChangeEventArgs e)
    {
        formData.Email = e.Value?.ToString() ?? "";
        emailError = false;
    }

    private void ClearMessageError(ChangeEventArgs e)
    {
        formData.Message = e.Value?.ToString() ?? "";
        messageError = false;
    }

    private async Task HandleSubmit()
    {
        emailError = string.IsNullOrWhiteSpace(formData.Email);
        messageError = string.IsNullOrWhiteSpace(formData.Message);

        if (emailError || messageError)
        {
            return;
        }

        isSubmitting = true;
        StateHasChanged();

        try
        {
            var usr = await Api.GetCurrentUserAsync();
            // Cargar Technical Data Sheet
            var payload = new { 
                usuario = usr.user, 
                nombre = formData.Name, 
                emailcontacto = formData.Email,
                telefono = formData.Phone,
                mensaje = formData.Message
            };
            var resp = await Http.PostAsync("customReports(1)/Microsoft.NAV.solicitudAyuda?tenant=nutris", payload);

                if (resp.IsSuccessStatusCode)
                {
                    isSubmitting = false;
                }

                // Auto-cerrar después de 3 segundos
                await Task.Delay(3000);
                Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
            await Task.Delay(1500);

            showSuccess = true;
            StateHasChanged();
       
    }

    private void ResetForm()
    {
        formData = new ContactFormData();
        emailError = false;
        messageError = false;
        isSubmitting = false;
        showSuccess = false;
    }
}