// Customize.razor - VERSIÓN CORREGIDA COMPLETA
@page "/customize-edit/{Id}"
@using System.Text.Json
@using Nutris.BlazorApp.Components.Orders
@using NutrisBlazor.Components.Shared
@using NutrisBlazor.Models
@inject ILocalizationService Localization
@inject ICustomizeApi CustomizeApi
@inject ICatalogService CatalogService
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<link href="css/Customize.css" rel="stylesheet" />
<PageTitle>Customize - @Id</PageTitle>

<div class="main-content main-content-orders" id="orders">
    @if (IsLoading)
    {
        <Loading LoadingText="@GetTranslation("Message.Loading", "Loading...")" />
    }
    else if (!string.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger m-3">
            <h4>Error</h4>
            <p>@Error</p>
            <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/"))">Volver al inicio</button>
        </div>
    }
    else if (RG35Data is not null || RG37Data is not null)
    {
        <OrdersComponent Id="@Id"
                         RG35="@RG35Data"
                         RG37="@RG37Data"
                         HasRG35="@(RG35Data is not null)"
                         HasRG37="@(RG37Data is not null)"
                         Atributos="@AtributosRoot"
                         RelacionBote="@RelacionBoteRoot"
                         RelacionTapa="@RelacionTapaRoot"
                         LotFormat="@LotFormatRoot"
                         BbdFormat="@BbdFormatRoot"
                         TiposCajas="@TiposCajas"
                         OnApprove="ApproveFormulationAsync"
                         OnSaveName="SaveProductCommercialNameAsync"
                         OnSaveLotFormat="@(x => SaveLotFormatAsync(x.format, x.other))"
                         OnSaveBbdFormat="@(x => SaveBbdFormatAsync(x.format, x.other))"
                         OnPatchRG35="PatchRG35Async"
                         OnPatchRG37="PatchRG37Async"
                         OnUploadBoxOrPallet="PostModificarImagenCabAsync" />
    }
    else
    {
        <div class="alert alert-warning m-3">
            <h4>Sin datos</h4>
            <p>No se encontraron datos para el pedido: <strong>@Id</strong></p>
            <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/"))">Volver al inicio</button>
        </div>
    }
</div>

@code {
    [Parameter] public string Id { get; set; } = string.Empty;

    // Datos principales
    CustomizeRG35Response? RG35Data;
    CustomizeRG37Response? RG37Data;

    // Catálogos
    JsonDocument? AtributosDoc;
    JsonDocument? RelacionBoteDoc;
    JsonDocument? RelacionTapaDoc;
    JsonDocument? LotFormatDoc;
    JsonDocument? BbdFormatDoc;
    JsonDocument? TiposCajasDoc;

    // Elementos JSON para pasar al componente
    JsonElement AtributosRoot;
    JsonElement RelacionBoteRoot;
    JsonElement RelacionTapaRoot;
    JsonElement LotFormatRoot;
    JsonElement BbdFormatRoot;
    JsonElement TiposCajas;

    [Inject] protected IApiService Api { get; set; } = default!;

    // Estado
    bool IsLoading = true;
    string? Error;
    string Prefix = "";

    // Caché para evitar recargas innecesarias
    private string _lastLoadedId = "";
    private bool _catalogsLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        // Precargar catálogos solo una vez
        await PreloadCatalogsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Solo recargar si el ID cambió
        if (_lastLoadedId != Id)
        {
            await LoadAllAsync();
        }
    }

    private string GetTranslation(string key, string defaultValue)
    {
        var translation = Localization[key];
        return string.IsNullOrEmpty(translation) || translation == key ? defaultValue : translation;
    }

    private async Task PreloadCatalogsAsync()
    {
        try
        {
            var areCatalogsValid = await CatalogService.AreCatalogsValidAsync();

            if (!areCatalogsValid)
            {
                await LoadCatalogsFromApiAsync();
            }
            else
            {
                await LoadCatalogsAsync();
            }

            _catalogsLoaded = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error preloading catalogs: {ex.Message}");
        }
    }

    private async Task LoadAllAsync()
    {
        IsLoading = true;
        Error = null;
        StateHasChanged();

        try
        {
            // Validar ID
            if (string.IsNullOrEmpty(Id))
            {
                Error = "No se proporcionó un ID válido.";
                return;
            }

            // Determinar el prefijo (RG35 o RG37)
            var parts = Id.Split('-');
            if (parts.Length == 0)
            {
                Error = "Formato de ID no válido.";
                return;
            }

            Prefix = parts[0].ToUpper();
            Console.WriteLine($"Loading data for ID: {Id}, Prefix: {Prefix}");

            // Cargar catálogos solo si no están cargados
            if (!_catalogsLoaded)
            {
                await PreloadCatalogsAsync();
            }

            // Cargar datos del pedido
            await LoadOrderDataAsync();

            // Cargar formatos específicos del pedido
            await LoadOrderSpecificFormatsAsync();

            _lastLoadedId = Id;
            Console.WriteLine("All data loaded successfully");
        }
        catch (HttpRequestException httpEx)
        {
            Error = $"Error de conexión: {httpEx.Message}";
            Console.WriteLine($"HTTP Error: {httpEx}");
        }
        catch (JsonException jsonEx)
        {
            Error = $"Error al procesar datos: {jsonEx.Message}";
            Console.WriteLine($"JSON Error: {jsonEx}");
        }
        catch (Exception ex)
        {
            Error = $"Error inesperado: {ex.Message}";
            Console.WriteLine($"Unexpected error: {ex}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadOrderDataAsync()
    {
        if (Prefix == "RG35")
        {
            Console.WriteLine("Loading RG35 data...");
            RG35Data = await CustomizeApi.GetRG35Async(Id);

            if (RG35Data == null)
            {
                Error = $"No se encontraron datos RG35 para el ID: {Id}";
                return;
            }

            // Transformar lotes y BBD
            if (RG35Data.Box_Lote?.Contains(":") == true)
            {
                RG35Data.Box_Lote = RG35Data.Box_Lote.Substring(RG35Data.Box_Lote.IndexOf(":") + 1);
            }
            if (RG35Data.Box_BBD?.Contains(":") == true)
            {
                RG35Data.Box_BBD = RG35Data.Box_BBD.Substring(RG35Data.Box_BBD.IndexOf(":") + 1);
            }

            // Cargar archivos si está cerrada
            await LoadRG35FilesAsync();

            // Limpiar fechas inválidas
            if (RG35Data.Estimated_date == "0001-01-01")
                RG35Data.Estimated_date = "";
            if (RG35Data.Deadline_date == "0001-01-01")
                RG35Data.Deadline_date = "";

            Console.WriteLine($"RG35 data loaded: Code={RG35Data.Code}");
        }
        else if (Prefix == "RG37")
        {
            Console.WriteLine("Loading RG37 data...");
            RG37Data = await CustomizeApi.GetRG37Async(Id);

            if (RG37Data == null)
            {
                Error = $"No se encontraron datos RG37 para el ID: {Id}";
                return;
            }

            Console.WriteLine($"RG37 data loaded: Code={RG37Data.Code}");
        }
        else
        {
            Error = $"Prefijo de ID no reconocido: {Prefix}";
        }
    }

    private async Task LoadCatalogsAsync()
    {
        try
        {
            Console.WriteLine("Loading catalogs from cache...");

            // Cargar catálogos desde cache en paralelo
            var catalogTasks = new[]
            {
                CatalogService.GetCachedCatalogAsync("Atributos"),
                CatalogService.GetCachedCatalogAsync("RelacionBote"),
                CatalogService.GetCachedCatalogAsync("RelacionTapa"),
                CatalogService.GetCachedCatalogAsync("TiposCajas")
            };

            var results = await Task.WhenAll(catalogTasks);

            AtributosDoc = results[0];
            RelacionBoteDoc = results[1];
            RelacionTapaDoc = results[2];
            TiposCajasDoc = results[3];

            // Si algún catálogo no está en cache, cargar todos desde API
            if (results.Any(r => r == null))
            {
                Console.WriteLine("Some catalogs missing from cache, reloading from API...");
                await LoadCatalogsFromApiAsync();
                return;
            }

            // Asignar elementos root
            AtributosRoot = AtributosDoc?.RootElement ?? default;
            RelacionBoteRoot = RelacionBoteDoc?.RootElement ?? default;
            RelacionTapaRoot = RelacionTapaDoc?.RootElement ?? default;
            TiposCajas = TiposCajasDoc?.RootElement ?? default;

            Console.WriteLine("Catalogs loaded from cache successfully ✓");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading catalogs from cache: {ex.Message}");
            await LoadCatalogsFromApiAsync();
        }
    }

    private async Task LoadCatalogsFromApiAsync()
    {
        Console.WriteLine("Loading catalogs from API...");

        var catalogTasks = new[]
        {
            CustomizeApi.GetAtributosAsync(),
            CustomizeApi.GetRelacionBoteAsync(),
            CustomizeApi.GetRelacionTapaAsync(),
            CustomizeApi.GetTiposCajastAsync()
        };

        var results = await Task.WhenAll(catalogTasks);

        AtributosDoc = results[0];
        RelacionBoteDoc = results[1];
        RelacionTapaDoc = results[2];
        TiposCajasDoc = results[3];

        // Asignar elementos root
        AtributosRoot = AtributosDoc?.RootElement ?? default;
        RelacionBoteRoot = RelacionBoteDoc?.RootElement ?? default;
        RelacionTapaRoot = RelacionTapaDoc?.RootElement ?? default;
        TiposCajas = TiposCajasDoc?.RootElement ?? default;

        // Guardar en cache para futuras cargas
        await CacheCatalogsAsync();

        Console.WriteLine("Catalogs loaded from API and cached ✓");
    }

    private async Task CacheCatalogsAsync()
    {
        try
        {
            var cacheTasks = new List<Task>();

            if (AtributosDoc != null)
            {
                var json = JsonSerializer.Serialize(AtributosDoc.RootElement);
                cacheTasks.Add(LocalStorage.SetItemAsync("catalog_Atributos", json));
            }
            if (RelacionBoteDoc != null)
            {
                var json = JsonSerializer.Serialize(RelacionBoteDoc.RootElement);
                cacheTasks.Add(LocalStorage.SetItemAsync("catalog_RelacionBote", json));
            }
            if (RelacionTapaDoc != null)
            {
                var json = JsonSerializer.Serialize(RelacionTapaDoc.RootElement);
                cacheTasks.Add(LocalStorage.SetItemAsync("catalog_RelacionTapa", json));
            }
            if (TiposCajasDoc != null)
            {
                var json = JsonSerializer.Serialize(TiposCajasDoc.RootElement);
                cacheTasks.Add(LocalStorage.SetItemAsync("catalog_TiposCajas", json));
            }

            cacheTasks.Add(LocalStorage.SetItemAsync("catalogsTimestamp", DateTime.UtcNow.ToString("o")));

            await Task.WhenAll(cacheTasks);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error caching catalogs: {ex.Message}");
        }
    }

    private async Task LoadOrderSpecificFormatsAsync()
    {
        try
        {
            var formatTasks = new[]
            {
                CustomizeApi.GetLotFormatAsync(Id),
                CustomizeApi.GetBbdFormatAsync(Id)
            };

            var results = await Task.WhenAll(formatTasks);

            LotFormatDoc = results[0];
            BbdFormatDoc = results[1];

            LotFormatRoot = LotFormatDoc?.RootElement ?? default;
            BbdFormatRoot = BbdFormatDoc?.RootElement ?? default;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading order formats: {ex.Message}");
        }
    }

    private async Task LoadRG35FilesAsync()
    {
        if (RG35Data == null) return;

        List<FileItem> Ficheros = new List<FileItem>();

        try
        {
            // Cargar Technical Data Sheet
            var payload = new { numeroRG = Id };
            var resp = await Api.PostAsync("dataSheet(1)/Microsoft.NAV.Download?tenant=nutris", payload);

            if (resp.IsSuccessStatusCode)
            {
                var json = await resp.Content.ReadAsStringAsync();
                using var doc = JsonDocument.Parse(json);
                var root = doc.RootElement;

                string? b64 = null;
                if (root.TryGetProperty("data", out var dataEl) &&
                    dataEl.TryGetProperty("value", out var valueEl))
                {
                    b64 = valueEl.GetString();
                }
                else if (root.TryGetProperty("value", out var valueEl2))
                {
                    b64 = valueEl2.GetString();
                }

                if (!string.IsNullOrWhiteSpace(b64) && RG35Data.Status == "Cerrado cliente y calidad")
                {
                    Ficheros.Add(new FileItem
                    {
                        Code = Id,
                        Name = $"TECHNICAL DATA SHEET {RG35Data.Product_name_2}.pdf",
                        File = b64
                    });
                }
            }

            // Cargar Customer Report si está cerrada (SECUENCIAL, no paralelo)
            if (RG35Data.Status == "Cerrado cliente y calidad")
            {
                var respCR = await Api.PostAsync(
                    "customReports(1)/Microsoft.NAV.GenerateReportWithLayout?tenant=nutris",
                    payload);

                if (respCR.IsSuccessStatusCode)
                {
                    var jsonCR = await respCR.Content.ReadAsStringAsync();
                    using var docCR = JsonDocument.Parse(jsonCR);
                    var rootCR = docCR.RootElement;

                    string? b64CR = null;
                    if (rootCR.TryGetProperty("data", out var dataElCR) &&
                        dataElCR.TryGetProperty("value", out var valueElCR))
                    {
                        b64CR = valueElCR.GetString();
                    }
                    else if (rootCR.TryGetProperty("value", out var valueEl2CR))
                    {
                        b64CR = valueEl2CR.GetString();
                    }

                    if (!string.IsNullOrWhiteSpace(b64CR))
                    {
                        Ficheros.Add(new FileItem
                        {
                            Code = Id,
                            Name = $"CUSTOMER RG REPORT {RG35Data.Code}.pdf",
                            File = b64CR
                        });
                    }
                }
            }

            RG35Data.Files = Ficheros;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading files: {ex.Message}");
        }
    }

    // ===== Callbacks para OrdersComponent =====

    private async Task ApproveFormulationAsync()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            if (Prefix == "RG37" && RG37Data != null)
            {
                await CustomizeApi.PatchRG37Async(Id, new
                {
                    Customer_accepted = true,
                    Status = "Cerrado cliente"
                });
                Console.WriteLine("RG37 approved successfully");
            }
            else if (Prefix == "RG35" && RG35Data != null && !string.IsNullOrEmpty(RG35Data.RG37))
            {
                await CustomizeApi.PatchRG37Async(RG35Data.RG37, new
                {
                    Customer_accepted = true,
                    Status = "Cerrado cliente"
                });
                Console.WriteLine($"RG37 {RG35Data.RG37} approved successfully");
            }

            // Forzar recarga
            _lastLoadedId = "";
            await LoadAllAsync();
        }
        catch (Exception ex)
        {
            Error = $"Error al aprobar formulación: {ex.Message}";
            Console.WriteLine($"Error in ApproveFormulationAsync: {ex}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveProductCommercialNameAsync(string newName)
    {
        try
        {
            Console.WriteLine($"Saving product name: {newName}");
            await CustomizeApi.PatchRG35Async(Id, new { Product_name_2 = newName });

            if (RG35Data != null)
            {
                RG35Data.Product_name_2 = newName;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Error = $"Error al guardar nombre: {ex.Message}";
            Console.WriteLine($"Error in SaveProductCommercialNameAsync: {ex}");
        }
    }

    private async Task SaveLotFormatAsync(string format, string? other = null)
    {
        try
        {
            var value = string.IsNullOrWhiteSpace(other) ? format : other;
            Console.WriteLine($"Saving lot format: {value}");

            var payload = new Dictionary<string, object?>
            {
                ["Filling_batch"] = value
            };

            await CustomizeApi.PatchRG35Async(Id, payload);

            if (RG35Data != null)
            {
                RG35Data.Filling_batch = value;
                if (!string.IsNullOrWhiteSpace(other))
                {
                    RG35Data.Filling_batch_others = other;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Error = $"Error al guardar formato de lote: {ex.Message}";
            Console.WriteLine($"Error in SaveLotFormatAsync: {ex}");
        }
    }

    private async Task SaveBbdFormatAsync(string format, string? other = null)
    {
        try
        {
            var value = string.IsNullOrWhiteSpace(other) ? format : other;
            Console.WriteLine($"Saving BBD format: {value}");

            var payload = new Dictionary<string, object?>
            {
                ["Filling_exp_date"] = value
            };

            await CustomizeApi.PatchRG35Async(Id, payload);

            if (RG35Data != null)
            {
                RG35Data.Filling_exp_date = value;
                if (!string.IsNullOrWhiteSpace(other))
                {
                    RG35Data.Filling_exp_date_others = other;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Error = $"Error al guardar formato BBD: {ex.Message}";
            Console.WriteLine($"Error in SaveBbdFormatAsync: {ex}");
        }
    }

    private async Task PatchRG35Async(object payload)
    {
        try
        {
            Console.WriteLine($"Patching RG35 with payload: {JsonSerializer.Serialize(payload)}");
            await CustomizeApi.PatchRG35Async(Id, payload);

            // Recarga parcial solo del pedido
            await LoadOrderDataAsync();
        }
        catch (Exception ex)
        {
            Error = $"Error al actualizar RG35: {ex.Message}";
            Console.WriteLine($"Error in PatchRG35Async: {ex}");
        }
    }

    private async Task PatchRG37Async(object payload)
    {
        try
        {
            var targetId = Prefix == "RG37" ? Id : RG35Data?.RG37;

            if (string.IsNullOrEmpty(targetId))
            {
                Error = "No se pudo determinar el ID de RG37 para actualizar.";
                return;
            }

            Console.WriteLine($"Patching RG37 ({targetId}) with payload: {JsonSerializer.Serialize(payload)}");
            await CustomizeApi.PatchRG37Async(targetId, payload);

            // Recarga parcial solo del pedido
            await LoadOrderDataAsync();
        }
        catch (Exception ex)
        {
            Error = $"Error al actualizar RG37: {ex.Message}";
            Console.WriteLine($"Error in PatchRG37Async: {ex}");
        }
    }

    private async Task PostModificarImagenCabAsync(object payload)
    {
        try
        {
            Console.WriteLine($"Uploading image with payload: {JsonSerializer.Serialize(payload)}");
            var response = await CustomizeApi.PostModificarImagenCabAsync(payload);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Image uploaded successfully");

                // Recarga parcial solo del pedido
                await LoadOrderDataAsync();
            }
            else
            {
                Error = $"Error al subir imagen: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            Error = $"Error al modificar imagen: {ex.Message}";
            Console.WriteLine($"Error in PostModificarImagenCabAsync: {ex}");
        }
    }
}