@page "/customize-edit/{Id}"
@* @page "/customize/{Id}" *@
@using System.Text.Json
@using Nutris.BlazorApp.Components.Orders
@using Nutris.BlazorApp.Features.Customize
@using NutrisBlazor.Components.Shared
@using NutrisBlazor.Models
@inject ILocalizationService Localization
@inject ICustomizeApi CustomizeApi
@inject NavigationManager Navigation
<link href="css/Customize.css" rel="stylesheet" />
<PageTitle>Customize - @Id</PageTitle>

<div class="main-content main-content-orders" id="orders">
    @if (IsLoading)
    {
        <Loading LoadingText="@GetTranslation("Message.Loading", "Loading...")" />
    }
    else if (!string.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger m-3">
            <h4>Error</h4>
            <p>@Error</p>
            <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/"))">Volver al inicio</button>
        </div>
    }
    else if (RG35Data is not null || RG37Data is not null)
    {
        <OrdersComponent 
            Id="@Id"
            RG35="@RG35Data"
            RG37="@RG37Data"
            HasRG35="@(RG35Data is not null)"
            HasRG37="@(RG37Data is not null)"
            Atributos="@AtributosRoot"
            RelacionBote="@RelacionBoteRoot"
            RelacionTapa="@RelacionTapaRoot"
            LotFormat="@LotFormatRoot"
            BbdFormat="@BbdFormatRoot"
            OnApprove="ApproveFormulationAsync"
            OnSaveName="SaveProductCommercialNameAsync"
            OnSaveLotFormat="@(x => SaveLotFormatAsync(x.format, x.other))"
            OnSaveBbdFormat="@(x => SaveBbdFormatAsync(x.format, x.other))"
            OnPatchRG35="PatchRG35Async"
            OnPatchRG37="PatchRG37Async"
            OnUploadBoxOrPallet="PostModificarImagenCabAsync" />
    }
    else
    {
        <div class="alert alert-warning m-3">
            <h4>Sin datos</h4>
            <p>No se encontraron datos para el pedido: <strong>@Id</strong></p>
            <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/"))">Volver al inicio</button>
        </div>
    }
</div>

 

@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    
    // Datos principales
    CustomizeRG35Response? RG35Data;
    CustomizeRG37Response? RG37Data;
    
    // Catálogos
    JsonDocument? AtributosDoc;
    JsonDocument? RelacionBoteDoc;
    JsonDocument? RelacionTapaDoc;
    JsonDocument? LotFormatDoc;
    JsonDocument? BbdFormatDoc;
    
    // Elementos JSON para pasar al componente
    JsonElement AtributosRoot;
    JsonElement RelacionBoteRoot;
    JsonElement RelacionTapaRoot;
    JsonElement LotFormatRoot;
    JsonElement BbdFormatRoot;
    
    // Estado
    bool IsLoading = true;
    string? Error;
    string Prefix = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAllAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Si el ID cambia, recargar datos
        await LoadAllAsync();
    }
    private string GetTranslation(string key, string defaultValue)
    {
        var translation = Localization[key];
        return string.IsNullOrEmpty(translation) || translation == key ? defaultValue : translation;
    }
    private async Task LoadAllAsync()
    {
        IsLoading = true;
        Error = null;
        StateHasChanged(); // Mostrar loading inmediatamente

        try
        {
            // Validar ID
            if (string.IsNullOrEmpty(Id))
            {
                Error = "No se proporcionó un ID válido.";
                return;
            }

            // Determinar el prefijo (RG35 o RG37)
            var parts = Id.Split('-');
            if (parts.Length == 0)
            {
                Error = "Formato de ID no válido.";
                return;
            }
            
            Prefix = parts[0].ToUpper();
            Console.WriteLine($"Loading data for ID: {Id}, Prefix: {Prefix}");

            // Cargar datos según el prefijo
            if (Prefix == "RG35")
            {
                Console.WriteLine("Loading RG35 data...");
                RG35Data = await CustomizeApi.GetRG35Async(Id);
                
                if (RG35Data == null)
                {
                    Error = $"No se encontraron datos RG35 para el ID: {Id}";
                    return;
                }
                
                Console.WriteLine($"RG35 data loaded: Code={RG35Data.Code}, Product={RG35Data.Product_name}");
            }
            else if (Prefix == "RG37")
            {
                Console.WriteLine("Loading RG37 data...");
                RG37Data = await CustomizeApi.GetRG37Async(Id);
                
                if (RG37Data == null)
                {
                    Error = $"No se encontraron datos RG37 para el ID: {Id}";
                    return;
                }
                
                Console.WriteLine($"RG37 data loaded: Code={RG37Data.Code}, Product={RG37Data.Product_name}");
            }
            else
            {
                Error = $"Prefijo de ID no reconocido: {Prefix}. Se esperaba RG35 o RG37.";
                return;
            }

            // Cargar catálogos (común para ambos tipos)
            Console.WriteLine("Loading catalogs...");
            
            var catalogTasks = new[]
            {
                CustomizeApi.GetAtributosAsync(),
                CustomizeApi.GetRelacionBoteAsync(),
                CustomizeApi.GetRelacionTapaAsync(),
                CustomizeApi.GetLotFormatAsync(Id),
                CustomizeApi.GetBbdFormatAsync(Id)
            };

            var results = await Task.WhenAll(catalogTasks);
            
            AtributosDoc = results[0];
            RelacionBoteDoc = results[1];
            RelacionTapaDoc = results[2];
            LotFormatDoc = results[3];
            BbdFormatDoc = results[4];

            // Asignar elementos root
            AtributosRoot = AtributosDoc?.RootElement ?? default;
            RelacionBoteRoot = RelacionBoteDoc?.RootElement ?? default;
            RelacionTapaRoot = RelacionTapaDoc?.RootElement ?? default;
            LotFormatRoot = LotFormatDoc?.RootElement ?? default;
            BbdFormatRoot = BbdFormatDoc?.RootElement ?? default;

            Console.WriteLine("All data loaded successfully");
        }
        catch (HttpRequestException httpEx)
        {
            Error = $"Error de conexión: {httpEx.Message}";
            Console.WriteLine($"HTTP Error: {httpEx}");
        }
        catch (JsonException jsonEx)
        {
            Error = $"Error al procesar datos: {jsonEx.Message}";
            Console.WriteLine($"JSON Error: {jsonEx}");
        }
        catch (Exception ex)
        {
            Error = $"Error inesperado: {ex.Message}";
            Console.WriteLine($"Unexpected error: {ex}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    // ===== Callbacks para OrdersComponent =====

    private async Task ApproveFormulationAsync()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            if (Prefix == "RG37" && RG37Data != null)
            {
                await CustomizeApi.PatchRG37Async(Id, new
                {
                    Customer_accepted = true,
                    Status = "Cerrado cliente"
                });
                Console.WriteLine("RG37 approved successfully");
            }
            else if (Prefix == "RG35" && RG35Data != null && !string.IsNullOrEmpty(RG35Data.RG37))
            {
                await CustomizeApi.PatchRG37Async(RG35Data.RG37, new
                {
                    Customer_accepted = true,
                    Status = "Cerrado cliente"
                });
                Console.WriteLine($"RG37 {RG35Data.RG37} approved successfully");
            }
            
            await LoadAllAsync();
        }
        catch (Exception ex)
        {
            Error = $"Error al aprobar formulación: {ex.Message}";
            Console.WriteLine($"Error in ApproveFormulationAsync: {ex}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveProductCommercialNameAsync(string newName)
    {
        try
        {
            Console.WriteLine($"Saving product name: {newName}");
            await CustomizeApi.PatchRG35Async(Id, new { Product_name_2 = newName });
            
            // Actualizar el valor local sin recargar todo
            if (RG35Data != null)
            {
                RG35Data.Product_name_2 = newName;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Error = $"Error al guardar nombre: {ex.Message}";
            Console.WriteLine($"Error in SaveProductCommercialNameAsync: {ex}");
        }
    }

    private async Task SaveLotFormatAsync(string format, string? other = null)
    {
        try
        {
            var value = string.IsNullOrWhiteSpace(other) ? format : other;
            Console.WriteLine($"Saving lot format: {value}");
            
            var payload = new Dictionary<string, object?>
            {
                ["Filling_batch"] = value
            };
            
            await CustomizeApi.PatchRG35Async(Id, payload);
            
            // Actualizar el valor local
            if (RG35Data != null)
            {
                RG35Data.Filling_batch = value;
                if (!string.IsNullOrWhiteSpace(other))
                {
                    RG35Data.Filling_batch_others = other;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Error = $"Error al guardar formato de lote: {ex.Message}";
            Console.WriteLine($"Error in SaveLotFormatAsync: {ex}");
        }
    }

    private async Task SaveBbdFormatAsync(string format, string? other = null)
    {
        try
        {
            var value = string.IsNullOrWhiteSpace(other) ? format : other;
            Console.WriteLine($"Saving BBD format: {value}");
            
            var payload = new Dictionary<string, object?>
            {
                ["Filling_exp_date"] = value
            };
            
            await CustomizeApi.PatchRG35Async(Id, payload);
            
            // Actualizar el valor local
            if (RG35Data != null)
            {
                RG35Data.Filling_exp_date = value;
                if (!string.IsNullOrWhiteSpace(other))
                {
                    RG35Data.Filling_exp_date_others = other;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Error = $"Error al guardar formato BBD: {ex.Message}";
            Console.WriteLine($"Error in SaveBbdFormatAsync: {ex}");
        }
    }

    private async Task PatchRG35Async(object payload)
    {
        try
        {
            Console.WriteLine($"Patching RG35 with payload: {JsonSerializer.Serialize(payload)}");
            await CustomizeApi.PatchRG35Async(Id, payload);
            await LoadAllAsync();
        }
        catch (Exception ex)
        {
            Error = $"Error al actualizar RG35: {ex.Message}";
            Console.WriteLine($"Error in PatchRG35Async: {ex}");
        }
    }

    private async Task PatchRG37Async(object payload)
    {
        try
        {
            var targetId = Prefix == "RG37" ? Id : RG35Data?.RG37;
            
            if (string.IsNullOrEmpty(targetId))
            {
                Error = "No se pudo determinar el ID de RG37 para actualizar.";
                return;
            }
            
            Console.WriteLine($"Patching RG37 ({targetId}) with payload: {JsonSerializer.Serialize(payload)}");
            await CustomizeApi.PatchRG37Async(targetId, payload);
            await LoadAllAsync();
        }
        catch (Exception ex)
        {
            Error = $"Error al actualizar RG37: {ex.Message}";
            Console.WriteLine($"Error in PatchRG37Async: {ex}");
        }
    }

    private async Task PostModificarImagenCabAsync(object payload)
    {
        try
        {
            Console.WriteLine($"Uploading image with payload: {JsonSerializer.Serialize(payload)}");
            var response = await CustomizeApi.PostModificarImagenCabAsync(payload);
            
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Image uploaded successfully");
                await LoadAllAsync();
            }
            else
            {
                Error = $"Error al subir imagen: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            Error = $"Error al modificar imagen: {ex.Message}";
            Console.WriteLine($"Error in PostModificarImagenCabAsync: {ex}");
        }
    }
}