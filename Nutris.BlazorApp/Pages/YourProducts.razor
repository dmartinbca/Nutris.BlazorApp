@page "/yourproducts"
@using NutrisBlazor.Components.Shared
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IApiService ApiService
@inject ILocalStorageService LocalStorage
@inject ILocalizationService Localization
@implements IDisposable
<link href="/css/YourProducts.css" rel="stylesheet" />
<link href="/css/fonts.css" rel="stylesheet" />
<PageTitle>@Localization["NavBar.YourProducts"] - NutrisBlazor</PageTitle>

<!-- Language Selector -->
<div class="language-selector-products">
    <button class="language-button" type="button" @onclick="ToggleLanguageMenu">
        @if (currentLanguage == "es")
        {
            <span>Español</span>
        }
        else
        {
            <span>English</span>
        }
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
        </svg>
    </button>

    @if (showLanguageMenu)
    {
        <div class="language-dropdown">
            <button class="dropdown-item" type="button" @onclick="@(() => SelectLanguage("en"))">
                English
            </button>
            <button class="dropdown-item" type="button" @onclick="@(() => SelectLanguage("es"))">
                Español
            </button>
        </div>
    }
</div>

<!-- Back Button -->
<div class="back-button-container">
    <button class="back-button" @onclick="GoBack">
        <svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="32" cy="32" r="32" fill="#2F5496" />
            <path d="M47 32.126H18.608M25.7061 23L17.297 31.409C16.901 31.805 16.901 32.447 17.297 32.843L25.7061 41.252"
                  stroke="white" stroke-width="2.3" stroke-linecap="round" />
        </svg>
    </button>
</div>




@if (isLoading)
{
     <Loading LoadingText="@GetTranslation("Message.Loading", "Loading...")" />
}
else
{
    <div class="products-main-content">
        @if (products.Any())
        {
            <div class="products-search-container">
                <form class="products-search-form-grid" @onsubmit:preventDefault="true">
                    <input class="products-search-field" type="text" @bind="searchTerm" @bind:event="oninput"
                           name="search" placeholder="@Localization["Search"]...">
                    <button class="products-search-btn" type="submit"></button>
                </form>
                <div style="position: relative; display: inline-block;">
                    <svg class="products-search-btn-filter" @onclick="OpenFilterModal"
                         xmlns="http://www.w3.org/2000/svg" width="30" height="26" viewBox="0 0 24 24"
                         fill="none" stroke="#2F5496" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
                    </svg>
                </div>
            </div>

            <div class="products-table-container">
                <table class="products-customize">
                    <thead>
                        <tr>
                            <th>@Localization["code"]</th>
                            <th>@Localization["product_name"]</th>
                            <th>@Localization["container"]</th>
                            <th>@Localization["units_per_container"]</th>
                            <th>@Localization["status"]</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in GetFilteredProducts())
                        {
                            <tr>
                                <td><p>@item.Code</p></td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.ProductName))
                                    {
                                        <p>@item.ProductName</p>
                                    }
                                    else
                                    {
                                        <p>-</p>
                                    }
                                </td>
                                <td><p>@item.Container</p></td>
                                <td>
                                    <p>@(item.UnitsPerContainer == 0 ? "" : item.UnitsPerContainer.ToString())</p>
                                </td>
                                <td>
                                    <div class="@GetStatusClass(item.Status)">
                                        @Localization[item.Status]
                                        @if (item.Status == "Cerrado cliente y calidad")
                                        {
                                            <span class="step-check">✓</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <button class="products-order-btn" @onclick="() => NavigateToDetails(item.Code)">
                                        <span>@Localization["details"]</span>
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                        </svg>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="products-empty-container">
                <div class="products-empty-content">
                    <img src="img/empty-table.svg" alt="empty">
                    <h2>@Localization["Empty.there"]</h2>
                    <p>@Localization["Empty.contact"]</p>
                </div>
            </div>
        }
    </div>
}

<!-- Filter Modal -->
@if (showFilterModal)
{
    <div class="products-modal-backdrop" @onclick="CloseFilterModal"></div>
    <div class="products-filter-modal">
        <div class="products-filter-modal-content">
            <div class="products-filter-modal-header">
                <h3>@Localization["Filter"]</h3>
                <button class="products-close-btn" @onclick="CloseFilterModal">&times;</button>
            </div>
            <div class="products-filter-modal-body">
                <div class="products-filter-group">
                    <label>@Localization["container"]</label>
                    <select @bind="filter.Container" class="products-form-control">
                        <option value="">@Localization["All"]</option>
                        <option value="Bote">@Localization["Bote"]</option>
                        <option value="Bulk">@Localization["Bulk"]</option>
                    </select>
                </div>
                <div class="products-filter-group">
                    <label>@Localization["status"]</label>
                    <select @bind="filter.Status" class="products-form-control">
                        <option value="">@Localization["All"]</option>
                        <option value="Cerrado cliente y calidad">@Localization["Cerrado cliente y calidad"]</option>
                        <option value="Cerrado cliente">@Localization["Cerrado cliente"]</option>
                        <option value="Desarrollo">@Localization["Desarrollo"]</option>
                    </select>
                </div>
            </div>
            <div class="products-filter-modal-footer">
                <button class="products-btn-clear" @onclick="ClearFilter">@Localization["Clear"]</button>
                <button class="products-btn-apply" @onclick="ApplyFilter">@Localization["Apply"]</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Product> products = new();
    private bool isLoading = true;
    private string searchTerm = "";
    private bool showFilterModal = false;
    private FilterModel filter = new();
    private bool showLanguageMenu = false;
    private string currentLanguage = "es";

    protected override async Task OnInitializedAsync()
    {
        // Obtener idioma actual
        currentLanguage = Localization.CurrentLanguage ?? "es";

        // Suscribirse a cambios de idioma
        Localization.OnLanguageChanged += OnLanguageChanged;

        await LoadProducts();
    }
    private string GetTranslation(string key, string defaultValue)
    {
        var translation = Localization[key];
        return string.IsNullOrEmpty(translation) || translation == key ? defaultValue : translation;
    }
    private void OnLanguageChanged()
    {
        currentLanguage = Localization.CurrentLanguage;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleLanguageMenu()
    {
        showLanguageMenu = !showLanguageMenu;
    }

    private async Task SelectLanguage(string language)
    {
        showLanguageMenu = false;
        await Localization.ChangeLanguageAsync(language);
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/home");
    }

    private async Task LoadProducts()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Obtener el número de cliente del LocalStorage
            var customerNo = await LocalStorage.GetItemAsync<string>("No_");

            if (string.IsNullOrEmpty(customerNo))
            {
                Console.WriteLine("No se encontró el número de cliente en LocalStorage");
                products = new List<Product>();
                return;
            }

            Console.WriteLine($"Customer No: {customerNo}");

            // Construir la URL de la API
            var apiUrl = $"CustomizeList?tenant=nutris&$filter=Customer eq '{customerNo}' and Status eq 'Cerrado cliente y calidad'";

            Console.WriteLine($"Llamando a API: {apiUrl}");

            // Hacer la llamada a la API usando el ApiService
            var response = await ApiService.GetAsync<ApiResponse>(apiUrl);

            if (response != null && response.Value != null)
            {
                products = response.Value.Select(item => new Product
                {
                    Code = item.Code ?? "",
                    ProductName = item.Product_name ?? "",
                    Container = item.Container ?? "",
                    UnitsPerContainer = item.Units_per_container,
                    Status = item.Status ?? ""
                }).ToList();

                Console.WriteLine($"Productos cargados: {products.Count}");
            }
            else
            {
                Console.WriteLine("Respuesta vacía de la API");
                products = new List<Product>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");

            // Usar datos de ejemplo para pruebas
            products = GetSampleProducts();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private List<Product> GetSampleProducts()
    {
        return new List<Product>
        {
            new Product
            {
                Code = "RG35-01134",
                ProductName = "IRON + VITAMIN C",
                Container = "Bote",
                UnitsPerContainer = 70,
                Status = "Cerrado cliente y calidad"
            },
            new Product
            {
                Code = "RG35-01085",
                ProductName = "TAURINE CAFFEINE GUARANA FOS PECTIN",
                Container = "Bote",
                UnitsPerContainer = 60,
                Status = "Cerrado cliente y calidad"
            },
            new Product
            {
                Code = "RG35-00739",
                ProductName = "CALCIUM PROB CAKE SHAPE FOS PECTIN",
                Container = "Bote",
                UnitsPerContainer = 70,
                Status = "Cerrado cliente y calidad"
            }
        };
    }

    private IEnumerable<Product> GetFilteredProducts()
    {
        return products.Where(item =>
        {
            var matchesSearch = string.IsNullOrEmpty(searchTerm) ||
                item.Code.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (item.ProductName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                item.Container.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                item.UnitsPerContainer.ToString().Contains(searchTerm) ||
                item.Status.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);

            var matchesContainer = string.IsNullOrEmpty(filter.Container) ||
                item.Container == filter.Container;

            var matchesStatus = string.IsNullOrEmpty(filter.Status) ||
                item.Status == filter.Status;

            return matchesSearch && matchesContainer && matchesStatus;
        });
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Cerrado cliente y calidad" => "products-status-finish",
            "Cerrado cliente" => "products-status-initial",
            "Desarrollo" => "products-status-develop",
            _ => ""
        };
    }

    private void NavigateToDetails(string code)
    {
        Navigation.NavigateTo($"/customize-edit/{code}");
    }

    private void OpenFilterModal()
    {
        showFilterModal = true;
    }

    private void CloseFilterModal()
    {
        showFilterModal = false;
    }

    private void ApplyFilter()
    {
        showFilterModal = false;
        StateHasChanged();
    }

    private void ClearFilter()
    {
        filter = new FilterModel();
        StateHasChanged();
    }

    public void Dispose()
    {
        Localization.OnLanguageChanged -= OnLanguageChanged;
    }

    // Modelos de datos
    public class Product
    {
        public string Code { get; set; } = "";
        public string? ProductName { get; set; }
        public string Container { get; set; } = "";
        public int UnitsPerContainer { get; set; }
        public string Status { get; set; } = "";
    }

    public class FilterModel
    {
        public string Container { get; set; } = "";
        public string Status { get; set; } = "";
    }

    // Modelo para la respuesta de la API
    public class ApiResponse
    {
        public List<ApiProduct> Value { get; set; } = new();
    }

    public class ApiProduct
    {
        public string? Code { get; set; }
        public string? Product_name { get; set; }
        public string? Container { get; set; }
        public int Units_per_container { get; set; }
        public string? Status { get; set; }
        public string? Customer { get; set; }
    }
}